<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Infragistics4.SyntaxParsing.v11.2</name>
    </assembly>
    <members>
        <member name="T:Infragistics.InfragisticsFeatureAttribute">
            <summary>
            Indicates an exposed type or member which was added as part of a new feature.
            </summary>
        </member>
        <member name="M:Infragistics.InfragisticsFeatureAttribute.#ctor">
            <summary>
            Creates a new <see cref="T:Infragistics.InfragisticsFeatureAttribute"/> instance.
            </summary>
        </member>
        <member name="P:Infragistics.InfragisticsFeatureAttribute.Exclude">
            <summary>
            Gets or sets the value indicating whether member or type should be excluded from the internal feature documentation.
            </summary>
        </member>
        <member name="P:Infragistics.InfragisticsFeatureAttribute.FeatureName">
            <summary>
            Gets or sets a short name description of the feature.
            </summary>
        </member>
        <member name="P:Infragistics.InfragisticsFeatureAttribute.SubFeatureName">
            <summary>
            Gets or sets a more granular sub-feature name description of the feature.
            </summary>
        </member>
        <member name="P:Infragistics.InfragisticsFeatureAttribute.Version">
            <summary>
            Gets or sets the version in which the feature was added.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.SyntaxRuleType">
            <summary>
            Constants which describe the production rules which are used
            by the associated
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.SyntaxRuleType.None">
            <summary>
            Used for variable declaration.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.SyntaxRuleType.Terminal">
            <summary>
            A rule consisting of a single
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>.
            A 'Terminal' rule cannot have sub-rules; attempting to add a sub-rule
            for a terminal rule will cause an exception to be thrown. A terminal
            rule is analogous to a leaf node of a parse tree; text is compared to
            the terminal symbol's value to decide whether the rule is satisfied.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.SyntaxRuleType.NonTerminal">
            <summary>
            A rule consisting of a single
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.SyntaxRuleType.Alternation">
            <summary>
            A logical 'OR' is applied between each of the sub-rules. If any of
            the sub-rules match the text being compared in the tex being validated,
            the rule is considered to have been satisfied.
            This rule is represented symbolically in EBNF by separating each individual
            subrule with the '|' character.
            Example: ('A' | 'B'); the rule is satisfied if either 'A' or 'B' is satisfied.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.SyntaxRuleType.Concatenation">
            <summary>
            A rule containing one or more sub-rules, which are expected to be
            satisfied in sequential order. Each of the sub-rules must parse
            text from the input string for the rule to be considered to have been satisfied.
            This rule is represented symbolically in EBNF by separating each individual
            subrule with the ',' character.
            Example: ('A', 'B'); the rule is satisfied if 'A' is satisfied, and,
            after the text associated with 'A' is consumed, 'B' is also satisfied.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.SyntaxRuleType.Conjunction">
            <summary>
            The first sub-rule is evaluated and if it fails, the Conjunction
            rule fails as well. If the first rule succeeds, the token it produces
            is then evaluated by subsequent rules and if all rules succeed, the
            first token's string is consumed and parsing continues.
            <br></br>
            <br></br>
            <b>Note: </b>Only the following rules can exist in the descendant
            chain of a Conjunction rule:
            <ul>
                <li><see cref="T:Infragistics.SyntaxParsing.TerminalRule">TerminalRule</see></li>
                <li><see cref="T:Infragistics.SyntaxParsing.NonTerminalRule">NonTerminalRule</see></li>
                <li><see cref="T:Infragistics.SyntaxParsing.AlternationRule">AlternationRule</see></li>
                <li><see cref="T:Infragistics.SyntaxParsing.ConjunctionRule">ConjunctionRule</see></li>
                <li><see cref="T:Infragistics.SyntaxParsing.NegationRule">NegationRule</see></li>
            </ul>
            Adding any other rule to the Rules collection of the ConjunctionRule,
            or that of any of its descendants, causes an
            <see cref="T:Infragistics.SyntaxParsing.InvalidDescendantOfConjunctionRuleException">InvalidDescendantOfConjunctionRuleException</see>
            to be thrown.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.SyntaxRuleType.Optional">
            <summary>
            Each of the sub-rules may or may not be satisfied when evaluating
            the text being validated. This rule is also known as "zero or one".
            This rule is represented symbolically in EBNF by enclosing each individual
            sub-rule within square brackets, i.e., the list is preceded with a
            '[' character and terminated with a ']' character.
            Example: ['A' | 'B']; the rule is satisfied if either 'A' or 'B'
            is satisfied, and also if neither 'A' nor 'B' is satisfied.
            The 'Optional' rule is the equivalent of a 'Repetition' rule with a
            minimum of 0 and a maximum of 1.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.SyntaxRuleType.Repetition">
            <summary>
            Each of the sub-rules may be repeated x or more times, and no
            more than y times, where x and y represent the minimum and maximum
            number of allowed occurrences, respectively. The 'Repetition' rule
            is satisfied if each sub-rule is satisfied at least the minimum
            number of repetitions, and not exceeding the maximum number of
            repetitions. The 'Repetition' rule has multiple symbolic representations in EBNF,
            depending on the different variations of minimum/maximum combinations.
            Enclosing a statement within curly braces ('{' and '}') specifies that
            the statement is evaluated repeatedly until it fails, and is satisfied
            whether it yields zero or more occurrences. Using the Kleene operator ("*")
            specifies an explicit number of expected occurrences. This mode of expression
            is also referred to as a syntactic factor.
            Examples:
            <ul>
            <li>
            {'A'}: The 'Repetition' rule is satisfied whether rule 'A' is satisfied or not,
            and 'A' may be repeated any number of times.
            If one or more descendant rules of 'A' is satisfied, but not all of them are,
            the 'Repetition' rule fails. If no descendant rules of 'A' are satisfied, or
            if all of them are, the 'Repetition' rule is satisfied. In this example, the
            minimum is set to 0 and the maximum is not enforced. Assuming 'A' is a terminal
            rule which expects a literal string, "A", this rule is satisfied if a number
            of occurrences of the string "A" is encountered in succession, and also if it
            is not encountered at all. If it is encountered, the parsing layer consumes each
            occurrence of the character, and the parsing operation continues.
            </li>
            <li>
            (3 * 'A'): The 'Repetition' rule is satisfied if and only if rule 'A' is
            satisfied exactly three times in succession. In this example, the minimum and
            maximum are both set to 3. Assuming 'A' is a terminal rule which expects
            a literal string, "A", this rule is satisfied only if the string "AAA" is
            encountered. If it is encountered, the parsing layer consumes all three
            characters, and the validation operation continues.
            </li>
            <li>
            (* 'A'): Same as the previous example, except that the syntactic factor
            is implied to be one, since no number was specified.
            </li>
            <li>
            (3 * ['A']): The 'Repetition' rule is satisfied if rule 'A' is
            satisfied zero, one, two, or three times in succession. In this
            example, the minimum is set to zero and the maximum is set to 3.
            </li>
            </ul>
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.SyntaxRuleType.Negation">
            <summary>
            A rule containing one or more sub-rules which are explicitly
            disallowed in order for the rule to be satisfied. 
            <br></br>
            <br></br>
            <b>Note: </b>As with the Conjunction rule, only the following rules
            can exist in the descendant chain of a Negation rule:
            <ul>
                <li><see cref="T:Infragistics.SyntaxParsing.TerminalRule">TerminalRule</see></li>
                <li><see cref="T:Infragistics.SyntaxParsing.NonTerminalRule">NonTerminalRule</see></li>
                <li><see cref="T:Infragistics.SyntaxParsing.AlternationRule">AlternationRule</see></li>
                <li><see cref="T:Infragistics.SyntaxParsing.ConjunctionRule">ConjunctionRule</see></li>
                <li><see cref="T:Infragistics.SyntaxParsing.NegationRule">NegationRule</see></li>
            </ul>
            Adding any other rule to the Rules collection of the Negation,
            or that of any of its descendants, causes an
            <see cref="T:Infragistics.SyntaxParsing.InvalidDescendantOfConjunctionRuleException">InvalidDescendantOfConjunctionRuleException</see>
            to be thrown.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.WhitespaceParsingMode">
            <summary>
            Constants which determine the manner in which whitespace character
            sequences that appear in the grammar definition are handled during
            syntax analysis.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.WhitespaceParsingMode.Automatic">
            <summary>
            Whitespace character sequences which appear between significant
            terminal symbols are automatically neutralized.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.WhitespaceParsingMode.Explicit">
            <summary>
            Whitespace character sequences which appear between significant
            terminal symbols must be explicitly accounted for in the grammar
            definition.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.TerminalSymbolComparison">
            <summary>
            Constants which determine the manner in which a terminal
            symbol's value is compared to values in the compilation
            source.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.TerminalSymbolComparison.Literal">
            <summary>
            The value associated with the symbol is a literal string.
            The syntax parser will compare values in the compilation
            target with the associated value and generate an error if
            the values do not match exactly. The comparison under this
            setting is case-sensitive.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.TerminalSymbolComparison.LiteralIgnoreCase">
            <summary>
            Same as the 'Literal' setting, except that character casing
            is ignored for the string comparisons.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.TerminalSymbolComparison.RegularExpression">
            <summary>
            The value associated with the symbol is implied to be a regular
            expression pattern. The
            <a href="http://msdn.microsoft.com/en-us/library/system.text.regularexpressions.regex.aspx">System._Text.RegularExpressions.Regex</a>
            class is used to determine whether values in the compilation target
            match the pattern assigned to the terminal symbol's value.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.TerminalSymbolParseResult.ExactMatch">
            <summary>
            A case-sensitive match was made.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.TerminalSymbolParseResult.CaseInsensitiveMatch">
            <summary>
            A case-insensitive match was made, i.e., the text was
            the same but case differed between the value and the input.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.TerminalSymbolParseResult.PatternMatch">
            <summary>
            The input matched the terminal's regex pattern.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.TerminalSymbolParseResult.NoMatch">
            <summary>
            No match was made.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.TerminalSymbolParseResult.MatchWithoutBoundary">
            <summary>
            A match was made, but was not followed by the expected boundary pattern.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.SyntaxValidationErrorAction">
            <summary>
            Constants which describe the action to be taken when
            a syntax validation error occurs.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.SyntaxValidationErrorAction.StopOnFirstError">
            <summary>
            The validation process is aborted upon the first error.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.SyntaxValidationErrorAction.Continue">
            <summary>
            The validation process continues until all content is parsed.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.ParseStatus">
            <summary>
            Constants which describe the result of a parse operation.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.ParseStatus.Undefined">
            <summary>
            Initial value
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.ParseStatus.Success">
            <summary>
            A terminal symbol successfully parsed input,
            or a non-terminal condition was fulfilled.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.ParseStatus.FailureWithCorrection">
            <summary>
            A terminal symbol failed to parse input, but the error
            was handled and execution was allowed to continue.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.ParseStatus.Failure">
            <summary>
            A terminal symbol failed to parse input, and the error
            was not handled, causing execution to halt.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.ParseStatus.Complete">
            <summary>
            All content has been consumed, i.e., the
            parse operation is complete.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.ParseErrorReason">
            <summary>
            Constants which describe the type of error that was encountered
            during the parsing of an input string.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.ParseErrorReason.Undefined">
            <summary>
            The reason for the error could not be conclusively determined.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.ParseErrorReason.Invalid">
            <summary>
            The terminal symbol's
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.Value">value</see>
            did not match the text at the current position of the input stream.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.ParseErrorReason.NoParseBoundary">
            <summary>
            The terminal symbol's
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.Value">value</see>
            matched the text at the current position of the input stream, but
            no characters matching the pattern defined by the TerminalBoundary's
            <see cref="P:Infragistics.SyntaxParsing.TerminalBoundary.Pattern">Pattern</see>
            property were found after the value.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.ParseErrorReason.Negation">
            <summary>
            The
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.Value">value</see>
            of a terminal symbol which was explicitly disallowed by a
            <see cref="T:Infragistics.SyntaxParsing.NegationRule">NegationRule</see>
            was encountered at the current position of the input stream.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.ParseErrorReason.UnrecognizedContent">
            <summary>
            All sub-rules for the
            <see cref="P:Infragistics.SyntaxParsing.Grammar.StartSymbol">StartSymbol</see>
            were evaluated, but all or part of the string passed to the
            <see cref="M:Infragistics.SyntaxParsing.Grammar.Parse(System.String)">Parse</see>
            method was not tokenized because no rule recognized the input.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.ParseErrorReason.EndOfStream">
            <summary>
            The input stream has been consumed in its entirety, but
            one or more rules have not yet been evaluated.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.GrammarDefinitionFormat">
            <summary>
            Constants which identify the formats supported for importing by the
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            class.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.GrammarDefinitionFormat.Unrecognized">
            <summary>
            A format which is not recognized by the
            <see cref="T:Infragistics.SyntaxParsing.Importing.GrammarImporter">GrammarImporter</see>
            class.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.GrammarDefinitionFormat.EBNF">
            <summary>
            Extended Backus-Naur Form, in compliance with the ISO/IEC 14977:1996 specification.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Grammar">
            <summary>
            Encapsulates a formal, context-free grammar whose production
            rules are used to parse and validate textual input.
            </summary>
            <remarks>
            <p class="body">
            The syntax of a programming language is defined by its grammar.
            This formal definition provides a way to define what constitutes
            a legal sequence of characters in a concise, unambiguous manner.
            </p>
            <p class="body">
            A syntax analyzer is a finite state machine which evaluates textual
            input according to the rules defined within the grammar, determining
            whether the input conforms to these rules. The starting point for
            syntax analysis is exposed through the
            <see cref="P:Infragistics.SyntaxParsing.Grammar.StartSymbol">StartSymbol</see>
            property. Syntax analysis is realized by recursively iterating the
            start symbol's
            <see cref="P:Infragistics.SyntaxParsing.NonTerminalSymbol.Rules">Rules</see>
            collection.
            </p>
            <p class="body">
            The main components of a grammar definition are encapsulated by the
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            and
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>
            classes.
            </p>
            <p class="body">
            A TerminalSymbol represents the string or pattern which must be
            matched in order for the corresonding rule to be satisfied. For example,
            a TerminalSymbol for the string "Foo" would evaluate the input string and
            signify success if it beings with "Foo", and signify failure if it does not.
            More complex evaluations are made possible through the use of regular expression
            patterns, which the TerminalSymbol class also supports. A TerminalSymbol also
            has no child rules, which reflects the meaning of its key - it represents the
            terminal point of a syntax rule evaluation.
            </p>
            <p class="body">
            A NonTerminalSymbol represents a grouping of rules which usually consists of
            multiple TerminalSymbols and other NonTerminalSymbols. A NonTerminalSymbol
            can be thought of as a shortcut through which a rule path can appear
            in different locations within the grammar without having to duplicate the
            logic. Unlike the TerminalSymbol, the NonTerminalSymbol class exposes a
            <see cref="P:Infragistics.SyntaxParsing.SyntaxRule.Rules">Rules</see>
            collection; the contents of this collection defines the order in which the
            grammatical rules are evaluated.
            </p>
            <p class="body">
            A
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleBase">syntax rule</see>
            is a concrete expression of a production rule of the grammar. Each
            type of rule represents a logical "operator" which defines the context
            for the evaluations performed by the TerminalSymbol. These rules make it
            possible to utilize familiar computer science concepts such as OR, AND,
            NAND, as well as repetition and optional evaluation. The following table
            provides a brief description of each type of rule:
            <br></br>
            <table border="1" cellpadding="3" width="100%" class="FilteredItemListTable">
            <thead>
            <tr>
            <th>Rule (see <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleType">SyntaxRuleType</see> enumeration)</th>
            <th>Description</th>
            </tr>
            </thead>
            <tbody>
            <tr>
                <td class="body">Alternation</td>
                <td class="body">
                Synonymous with a logical 'OR' operator. Each sub-rule is evaluated until
                one succeeds, in which case the rule is satisfied. If all sub-rules fail,
                the alternation rule fails. As soon as one rule succeeds, the matching text
                is consumed and execution returns.
                <br></br>(see <see cref="T:Infragistics.SyntaxParsing.AlternationRule">AlternationRule</see>)
                </td>
            </tr>
            <tr>
                <td class="body">Concatenation</td>
                <td class="body">
                Each sub-rule is evaluated in the order in which they appear within
                the collection. If any sub-rule fails, the concatenation rule fails.
                As each rule succeeds, the matching text is consumed so that the next
                sub-rule evaluates the remaining text.
                <br></br>(see <see cref="T:Infragistics.SyntaxParsing.ConcatenationRule">ConcatenationRule</see>)
                </td>
            </tr>
            <tr>
                <td class="body">Conjunction</td>
                <td class="body">
                Synonymous with a logical 'AND' operator. Each sub-rule is evaluated
                against the same input text, so that the same text is checked against
                multiple conditions. If any sub-rule fails, the conjunction rule fails.
                If all rules succeed, the match which yielded the longest string of
                characters is consumed and execution returns.
                <br></br>(see <see cref="T:Infragistics.SyntaxParsing.ConjunctionRule">ConjunctionRule</see>)
                </td>
            </tr>
            <tr>
                <td class="body">Optional</td>
                <td class="body">
                Synonymous with a while loop which may contain zero or one iterations.
                Contains only one sub-rule, which is evaluated once; if each child rule
                of that sub-rule succeeds, the optional rule succeeds and execution returns.
                If the first terminal rule encountered fails, the optional rule fails, but
                no error is generated, and execution returns without consuming any of the
                input text. The Optional rule is a special case of the Repetition rule
                with a minimum of zero and a maximum of one.
                <br></br>(see <see cref="T:Infragistics.SyntaxParsing.OptionalRule">OptionalRule</see>)
                </td>
            </tr>
            <tr>
                <td class="body">Repetition</td>
                <td class="body">
                Synonymous with a for loop which contains one or more iterations.
                Contains only one sub-rule, which is evaluated n times, where n is
                defined by the minimum and maximum values for the rule. If the sub-rule
                succeeds at least as many times as the minimum requires, it succeeds,
                and fails if it does not. The number of iterations is dependent on the
                maximum, and the maximum can remain undefined, which causes the sub-rule
                to be evaluated until it fails.
                <br></br>(see <see cref="T:Infragistics.SyntaxParsing.RepetitionRule">RepetitionRule</see>)
                </td>
            </tr>
            <tr>
                <td class="body">Negation</td>
                <td class="body">
                Synonymous with a logical 'NAND' operator. The NegationOperator rule is the
                direct opposite of the ConjunctionOperator rule; each sub-rule is evaluated
                without consuming matched text, and the negation rule succeeds only
                if all sub-rules fail. 
                <br></br>(see <see cref="T:Infragistics.SyntaxParsing.NegationRule">NegationRule</see>)
                </td>
            </tr>
            <tr>
                <td class="body">Terminal</td>
                <td class="body">
                Placeholder for the
                <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>.
                All Rules collections must contain at least one Terminal rule.
                <br></br>(see <see cref="T:Infragistics.SyntaxParsing.TerminalRule">TerminalRule</see>)
                </td>
            </tr>
            <tr>
                <td class="body">NonTerminal</td>
                <td class="body">
                Placeholder for the
                <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>.
                <br></br>(see <see cref="T:Infragistics.SyntaxParsing.NonTerminalRule">NonTerminalRule</see>)
                </td>
            </tr>
            </tbody>
            </table>
            </p>
            <p class="body">
            Syntax analysis begins by calling the
            <see cref="M:Infragistics.SyntaxParsing.Grammar.Parse(System.String)">Parse</see>
            method; this method analyzes each
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleBase">syntax rule</see>
            defined for the grammar by recursively iterating the start symbol's
            <see cref="P:Infragistics.SyntaxParsing.SyntaxRule.Rules">Rules</see>
            collection, consuming characters in the input string according to
            the properties of the
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            which exists at each leaf node of the rule tree. The Parse method
            returns an instance of the
            <see cref="T:Infragistics.SyntaxParsing.ParseTree">ParseTree</see>
            class, which encapsulates a tokenized representation of the text
            that was passed to the method. This ParseTree can be used by consumers
            to facilitate semantic interpretation, as well as code highlighting
            and code folding.
            </p>
            <p class="body">
            Because virtually every programming language can be defined by a
            context-free grammar, this class can be used to create a custom
            programming language.
            </p>
            </remarks>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Grammar.DefaultWhitespaceRegexPattern">
            <summary>
            Returns the default regular expression pattern
            used to identify whitespace characters ("[\s\n\t]+").
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Grammar.OnImporting(Infragistics.SyntaxParsing.GrammarImportingEventArgs)">
            <summary>
            Raises the
            <see cref="E:Infragistics.SyntaxParsing.Grammar.Importing">Importing</see>
            event.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Grammar.OnImportComplete(Infragistics.SyntaxParsing.GrammarImportCompleteEventArgs)">
            <summary>
            Raises the
            <see cref="E:Infragistics.SyntaxParsing.Grammar.ImportComplete">ImportComplete</see>
            event.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Grammar.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            class.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Grammar.Parse(System.String)">
            <summary>
            Parses the specified text using the syntactic rules defined by this
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>.
            </summary>
            <param key="input">The input string to parse.</param>
            <returns>
            A
            <see cref="T:Infragistics.SyntaxParsing.ParseTree">ParseTree</see>
            instance which describes the result of the syntax analysis.
            </returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Grammar.Parse(System.String,Infragistics.SyntaxParsing.ParseNodeHandler)">
            <summary>
            Parses the specified text using the syntactic rules defined by this
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>.
            </summary>
            <param key="input">The input string to parse.</param>
            <param key="callback">
            Specifies a method which is called upon completion of the parse operation.
            This method is called for each node in the ParseTree, giving the handler
            an opportunity to perform tasks related to the operation, such as updating
            the user interface. Specify null for no callback.
            </param>
            <returns>
            A
            <see cref="T:Infragistics.SyntaxParsing.ParseTree">ParseTree</see>
            instance which describes the result of the syntax analysis.
            </returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Grammar.AssignTerminalSymbolMatch(Infragistics.SyntaxParsing.TerminalSymbol,Infragistics.SyntaxParsing.TerminalSymbol)">
            <summary>
            Assigns a cross-reference to the specified 
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">terminal symbols</see>.
            </summary>
            <param key="openingSymbol">
            The
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            which is designated as the opening symbol for the match, for example,
            an open parenthesis.
            </param>
            <param key="closingSymbol">
            The
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            which is designated as the closing symbol for the match, for example,
            a closed parenthesis.
            </param>
            <remarks>
            <p class="body">
            This method sets the
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.MatchingSymbol">MatchingSymbol</see>
            property for each of the specified symbols; each symbol will then refer to the other
            as its complement.
            </p>
            </remarks>
            <seealso cref="M:Infragistics.SyntaxParsing.Grammar.RemoveTerminalSymbolMatch(Infragistics.SyntaxParsing.TerminalSymbol)">RemoveTerminalSymbolMatch</seealso>
            <seealso cref="P:Infragistics.SyntaxParsing.TerminalSymbol.MatchingSymbol">MatchingSymbol property (TerminalSymbol class)</seealso>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Grammar.RemoveTerminalSymbolMatch(Infragistics.SyntaxParsing.TerminalSymbol)">
            <summary>
            Clears the value of the
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.MatchingSymbol">MatchingSymbol</see>
            property for the specified <param name="symbol">symbol</param>and the
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            it references.
            </summary>
            <param key="symbol">
            The
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">symbol</see>
            for which the match is removed.
            </param>
            <seealso cref="M:Infragistics.SyntaxParsing.Grammar.AssignTerminalSymbolMatch(Infragistics.SyntaxParsing.TerminalSymbol,Infragistics.SyntaxParsing.TerminalSymbol)">AssignTerminalSymbolMatch</seealso>
            <seealso cref="P:Infragistics.SyntaxParsing.TerminalSymbol.MatchingSymbol">MatchingSymbol property (TerminalSymbol class)</seealso>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Grammar.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Grammar.Reset">
            <summary>
            Resets all members to their respective default values
            and clears all collections.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Grammar.InitializeFrom(Infragistics.SyntaxParsing.Grammar)">
            <summary>
            Initializes this
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            instance from the specified <paramref name="source"/>
            instance.
            </summary>
            <param name="source">
            The instance from which this instance is to be initialized.
            </param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Grammar.Import(System.String,Infragistics.SyntaxParsing.Importing.GrammarImporter)">
            <summary>
            Initializes this
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            instance from the specified file, using the specified
            <paramref name="importer"/>.
            </summary>
            <param name="filename">
            A string containing the full path to the grammar definition.
            </param>
            <param name="importer">
            The
            <see cref="T:Infragistics.SyntaxParsing.Importing.GrammarImporter">GrammarImporter</see>
            instance which is used to import the grammar definition.
            </param>
            <returns>
            An
            <see cref="T:Infragistics.SyntaxParsing.Importing.ImportResult">ImportResult</see>
            instance which describes the result of the import operation.
            </returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Grammar.ImportFromFile(System.String,Infragistics.SyntaxParsing.Importing.GrammarImporter)">
            <summary>
            Initializes this
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            instance from the specified file, using the specified file.
            </summary>
            <param name="filename">
            A string containing the full path to the grammar definition.
            </param>
            <param name="importer">
            The
            <see cref="T:Infragistics.SyntaxParsing.Importing.GrammarImporter">GrammarImporter</see>
            instance which is used to import the grammar definition.
            </param>
            <returns>
            An
            <see cref="T:Infragistics.SyntaxParsing.Importing.ImportResult">ImportResult</see>
            instance which describes the result of the import operation.
            </returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Grammar.Import(System.String,Infragistics.SyntaxParsing.GrammarDefinitionFormat)">
            <summary>
            Initializes this
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            instance from the specified <paramref name="grammarDefinition"/>,
            using the specified <paramref name="format"/>.
            </summary>
            <param name="grammarDefinition">
            A string containing the grammar definition.
            </param>
            <param name="format">
            A
            <see cref="T:Infragistics.SyntaxParsing.GrammarDefinitionFormat">GrammarDefinitionFormat</see>
            constant which identifies the format of the grammar definition.
            </param>
            <returns>
            An
            <see cref="T:Infragistics.SyntaxParsing.Importing.ImportResult">ImportResult</see>
            instance which describes the result of the import operation.
            </returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Grammar.ImportFromFile(System.String,Infragistics.SyntaxParsing.GrammarDefinitionFormat)">
            <summary>
            Initializes this
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            instance from the specified file, using the specified <paramref name="format"/>.
            </summary>
            <param name="filename">
            A string containing the full path to the grammar definition.
            </param>
            <param name="format">
            A
            <see cref="T:Infragistics.SyntaxParsing.GrammarDefinitionFormat">GrammarDefinitionFormat</see>
            constant which identifies the format of the grammar definition.
            </param>
            <returns>
            An
            <see cref="T:Infragistics.SyntaxParsing.Importing.ImportResult">ImportResult</see>
            instance which describes the result of the import operation.
            </returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Grammar.GetLineNumber(System.String,System.Int32@)">
            <summary>
            Returns the one-based line number and column of the character
            following the last character of the specified <paramref name="input"/>.
            </summary>
            <param name="input">The string to evaluate.</param>
            <param name="column">[out] Upon return, contains the one-based column in which the character appears.</param>
            <returns>The one-based line number on which the character appears.</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Grammar.GetLineNumber(System.String,System.String,System.Int32@)">
            <summary>
            Returns the one-based line number and column of the character
            following the last character of the specified <paramref name="input"/>.
            </summary>
        </member>
        <member name="E:Infragistics.SyntaxParsing.Grammar.Importing">
            <summary>
            Fires when a new grammar definition is loaded by calling the
            <see cref="M:Infragistics.SyntaxParsing.Grammar.Import(System.String,Infragistics.SyntaxParsing.GrammarDefinitionFormat)">Import</see>
            method.
            </summary>
        </member>
        <member name="E:Infragistics.SyntaxParsing.Grammar.ImportComplete">
            <summary>
            Fires after a grammar definition has been successfully loaded by calling the
            <see cref="M:Infragistics.SyntaxParsing.Grammar.Import(System.String,Infragistics.SyntaxParsing.GrammarDefinitionFormat)">Import</see>
            method.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Grammar.TerminalBoundary">
            <summary>
            Returns a
            <see cref="T:Infragistics.SyntaxParsing.TerminalBoundary">TerminalBoundary</see>
            instance which defines the parsing boundary for terminal rules associated
            with this Grammar.
            </summary>
            <remarks>
            <p class="body">
            A parsing boundary is essentially a separator which appears between
            significant terminal values. Typically a parsing boundary can be
            whitespace or characters which have special significance to the grammar.
            Parsing boundaries are necessary in order to identify terminal values
            unambiguously.
            </p>
            <p class="body">
            By default, the terminal boundary for this grammar is defined by the
            <see cref="P:Infragistics.SyntaxParsing.Grammar.WhitespaceRegexPattern">WhitespaceRegexPattern</see>
            and each
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            whose
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.IsBoundary">IsBoundary</see>
            property returns true.
            </p>
            <p class="body">
            The TerminalBoundary's IsBoundary property is settable and can be set to true
            to make any terminal symbol act as a boundary for other symbols. When not
            explicitly set, each TerminalSymbol whose Comparison property returns 'Literal',
            and whose Value property returns a string that contains only one character
            where that character is neither a letter nor a digit, is also assumed to be
            a valid terminal parsing boundary for other terminal symbols. Setting the
            IsBoundary property negates its status as a terminal parsing boundary.
            </p>
            </remarks>
            <p class="body">
            Terminal parsing boundaries can be set at the following levels of the property
            resolution hierarchy, in order of descending priority:
            <ul>
                <li>
                The TerminalBoundary property of the
                <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
                itself.
                </li>
                <li>
                The TerminalBoundary property of the
                <see cref="T:Infragistics.SyntaxParsing.SymbolGroup">SymbolGroup</see>
                to which the terminal symbol belongs, if any.
                </li>
                <li>
                The associated
                <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>.
                </li>
            </ul>
            </p>
            <seealso cref="P:Infragistics.SyntaxParsing.TerminalSymbol.IsBoundary">IsBoundary property (TerminalSymbol class)</seealso>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Grammar.DefaultTerminalBoundaryRegexPattern">
            <summary>
            Returns a regular expression pattern used by default to
            determine whether the character(s) following a parsed token
            constitute a valid parsing boundary for the token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Grammar.SymbolGroups">
            <summary>
            Returns a collection which contains the
            <see cref="T:Infragistics.SyntaxParsing.SymbolGroup">SymbolGroup</see>
            instances associated with this grammar.
            </summary>
            <remarks>
            <p class="body">
            Symbol groups are used to logically group terminal and/or
            non-terminal symbols which are similar in the context of the
            application. For example, if literal terminal symbols were created
            for the C# programming language keywords "using", "namespace", "class",
            and "this", the developer might add them to a group named "keywords".
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Grammar.SyntaxValidationErrorAction">
            <summary>
            Returns or sets a value which indicates whether syntax analysis
            continues after the first syntax validation error occurs.
            </summary>
            <remarks>
            <p class="body">
            By default, the syntax validation layer will continue after a syntax
            validation error so that multiple errors can be reported. This property
            can be used to prevent this, so that the validation operation terminates
            as soon as the first error is encountered.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Grammar.StartSymbol">
            <summary>
            Returns or sets a reference to the
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>
            which defines the starting point for the
            <see cref="M:Infragistics.SyntaxParsing.Grammar.Parse(System.String)">Parse</see>
            method.
            </summary>
            <remarks>
            <p class="body">
            When the
            <see cref="M:Infragistics.SyntaxParsing.Grammar.Parse(System.String)">Parse</see>
            method is called, each production rule of the grammar is analyzed
            until all the input text is consumed, or until all rules have been
            evaluated. The StartSymbol defines the starting point for this analysis.
            </p>
            <p class="body">
            The StartSymbol property must be set to a non-null value prior to calling the
            <see cref="M:Infragistics.SyntaxParsing.Grammar.Parse(System.String)">Parse</see>
            method, or an exception is thrown.
            </p>
            <p class="body">
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Grammar.TerminalSymbols">
            <summary>
            Returns a read-only collection which contains all
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            instances defined for this grammar.
            </summary>
            <remarks>
            <p class="body">
            Terminal symbols are literal characters that can appear in the inputs
            to or outputs from the production rules of a formal grammar and are
            irreducible, i.e., cannot be broken down into "smaller" units.
            </p>
            <p class="body">
            TerminalSymbols are added to this collection automatically upon creation.
            Create new TerminalSymbol instances using the static
            <see cref="M:Infragistics.SyntaxParsing.TerminalSymbol.Create(Infragistics.SyntaxParsing.Grammar,System.String,System.String,Infragistics.SyntaxParsing.TerminalSymbolComparison)">Create</see>
            method.
            </p>
            </remarks> 
            <seealso cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol class</seealso>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Grammar.PrioritySymbols">
            <summary>
            Returns a collection of
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">terminal</see>
            and
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">non-terminal</see>
            symbols which are given an opportunity to match the input text before
            production rules are evaluated.
            </summary>
            <remarks>
            <p class="body">
            The lexing/parsing process begins when the
            <see cref="M:Infragistics.SyntaxParsing.Grammar.Parse(System.String)">Parse</see>
            method is called, causing the production rules defined for this
            grammar to be evaluated, in the order determined by the StartSymbol's
            Rules collection. The PrioritySymbols collection makes it possible
            for the developer to "insert" a rule at every location within the
            rule tree, so that symbols which are valid anywhere within the input
            text can be evaluated without having to explicitly define rules for
            them within the rule tree.
            </p>
            <p class="body">
            A good example of the use of PrioritySymbols is a comment line in the
            C# programming language. A comment line in C# begins with a double-slash
            ('//'), can be followed by virtually anything at all, and is terminated
            by a newline. This is easily expressed by the regular expression "//.*".
            Without the use of the PrioritySymbols collection, the developer would
            have to add an optional rule (containing a terminal rule with this
            regular expression) for virtually every rule in the rule tree in order
            to support comment lines within the code.
            </p>
            <p class="body">
            The PrioritySymbols collection can be thought of as an
            <see cref="T:Infragistics.SyntaxParsing.OptionalRule">OptionalRule</see>
            containing one
            <see cref="T:Infragistics.SyntaxParsing.AlternationRule">AlternationRule</see>,
            with each member of the collection being a sub-rule of that AlternationRule.
            If the rule defined by any member of this collection is satisfied, the
            text is consumed and optionally tokenized. The process continues until
            all rules (as defined by the members of this collection) fail, at which
            point syntax analysis continues from the next rule in the rule tree.
            </p>
            <p class="body">
            To avoid performance issues, it is recommended that any
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbols</see>
            added to this collection contain a
            <see cref="T:Infragistics.SyntaxParsing.TerminalRule">TerminalRule</see>
            close to the beginning of its rule tree, so that the determination of
            whether the current input text matches the symbol can be made quickly.
            This is especially important because the PrioritySymbols are evaluated
            frequently as compared to other symbols.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Grammar.NonTerminalSymbols">
            <summary>
            Returns a collection of the non-terminal symbols which define this grammar.
            </summary>
            <remarks>
            <p class="body">
            A NonTerminalSymbol is a symbol of the grammar which can be replaced
            by some combination of
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">terminal</see>
            and non-terminal symbols.
            </p>
            <p class="body">
            A NonTerminalSymbol exposes a
            <see cref="P:Infragistics.SyntaxParsing.NonTerminalSymbol.Rules">Rules</see>
            collection to which syntax rules are added, thus defining the syntax
            for the grammar.
            </p>
            <p class="body">
            The
            <see cref="P:Infragistics.SyntaxParsing.Grammar.StartSymbol">StartSymbol</see>
            property references a NonTerminalSymbol which defines the starting
            point for parse operations.
            </p>
            </remarks>
            <seealso cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol class</seealso>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Grammar.WhitespaceParsingMode">
            <summary>
            Returns or sets a value indicating the manner in which whitespace
            character sequences are handled by the syntax analysis layer.
            </summary>
            <remarks>
            <p class="body">
            By default, whitespace characters are automatically consumed without
            analysis by the syntax validation layer, so that whitespace characters
            are effectively insignificant. If a grammar needs to explicitly
            evaluate whitespace, this property can be used to switch off automatic
            consumption, thus allowing whitespace to be tokenized, and allowing syntax
            validation errors to be reported when whitespace is encountered at invalid
            locations within the text.
            </p>
            <p class="body">
            In situations where whitespace should usually be disregarded, but is
            explicitly expected to appear at certain locations within the text
            being analyzed, the
            <see cref="P:Infragistics.SyntaxParsing.Grammar.WhitespaceRegexSymbol">WhitespaceRegexSymbol</see>
            property can be used to create a
            <see cref="T:Infragistics.SyntaxParsing.TerminalRule">TerminalRule</see>
            which will enforce the presence of whitespace at the designated locations.
            </p>
            </remarks>
            <seealso cref="P:Infragistics.SyntaxParsing.Grammar.WhitespaceRegexPattern">WhitespaceRegexPattern</seealso>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Grammar.WhitespaceRegexPattern">
            <summary>
            Returns the regular expression pattern used to identify
            whitespace by the syntax analysis layer.
            </summary>
            <remarks>
            <p class="body">
            By default, the pattern '[\s\n\t]+' is used, which matches the ASCII
            characters 9 (horizontal tab), 10 (line feed), 13 (carriage return),
            and 32 (space). This property can be set to any valid regular expression
            pattern to change the definition of whitespace for this grammar.
            </p>
            </remarks>
            <seealso cref="P:Infragistics.SyntaxParsing.Grammar.WhitespaceParsingMode">WhitespaceParsingMode</seealso>
            <seealso cref="P:Infragistics.SyntaxParsing.Grammar.WhitespaceRegexSymbol">WhitespaceRegexSymbol</seealso>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Grammar.WhitespaceRegexSymbol">
            <summary>
            Returns a
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            based on the value of the
            <see cref="P:Infragistics.SyntaxParsing.Grammar.WhitespaceRegexPattern">WhitespaceRegexPattern</see>
            property, which can be used to match whitespace characters.
            </summary>
            <remarks>
            <p class="body">
            When the
            <see cref="T:Infragistics.SyntaxParsing.WhitespaceParsingMode">WhitespaceParsingMode</see>
            is set to 'Automatic', whitespace characters are automatically parsed out of the
            text being analyzed. If a syntax rule expects whitespace at a specific location,
            it would fail to find it since it would have already been parsed and consumed.
            This property can be used to create a
            <see cref="T:Infragistics.SyntaxParsing.TerminalRule">TerminalRule</see>
            which is recognized by the syntax analysis layer so that it does not
            automatically parse out whitespace, allowing the rule for this symbol
            to be analyzed. This allows for whitespace to be ignored most of the
            time, while still providing a way to require whitespace at specific locations.
            </p>
            <p class="body">
            Since it is usually desirable to omit tokens which represent whitespace
            from the resulting output, the instance returned from this property is
            created with a value of false for the 'generatesToken' parameter. If the
            application requirements are such that whitespace should be tokenized,
            set the WhitespaceParsingMode property to 'Explicit', and add terminal
            rules for enforcing the presence of whitespace characters where required.
            </p>
            </remarks> 
            <seealso cref="P:Infragistics.SyntaxParsing.Grammar.WhitespaceRegexPattern">WhitespaceRegexPattern</seealso>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Grammar.NewLine">
            <summary>
            Returns or sets the character string which is used to represent
            new lines in text which is analyzed by the syntax validation layer.
            </summary>
            <remarks>
            <p class="body">
            In the case where the NewLine property is not explicitly set, the
            input string is searched for the presence of typical newline character
            sequences, i.e., '\r\n' and '\n'. Upon detection of the first newline,
            the value is cached and assumed to be the line delimiting character. This
            behavior can be overriden by explicitly setting the NewLine property.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Grammar.Name">
            <summary>
            Returns or sets a human-readable name for this grammar definition.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.ImportingHandler">
            <summary>
            Defines the signature of the method that handles the
            <see cref="E:Infragistics.SyntaxParsing.Grammar.Importing">Importing</see>
            event.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.GrammarImportingEventArgs">
            <summary>
            Contains information about the
            <see cref="E:Infragistics.SyntaxParsing.Grammar.Importing">Importing</see>
            event.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.GrammarImportingEventArgs.GrammarDefinition">
            <summary>
            Returns or sets a string containing the grammar definition
            to be imported.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.GrammarImportCompleteHandler">
            <summary>
            Defines the signature of the method that handles the
            <see cref="E:Infragistics.SyntaxParsing.Grammar.ImportComplete">ImportComplete</see>
            event.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.GrammarImportCompleteEventArgs">
            <summary>
            Contains information about the
            <see cref="E:Infragistics.SyntaxParsing.Grammar.ImportComplete">ImportComplete</see>
            event.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.GrammarImportCompleteEventArgs.Grammar">
            <summary>
            Returns a reference to the
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            instance resulting from the import operation.
            </summary>
            <remarks>
            <p class="body">
            When a grammar definition has been successfully imported,
            this property returns a reference to the resulting
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            instance.
            </p>
            </remarks>
        </member>
        <member name="T:Infragistics.SyntaxParsing.NonTerminalSymbolsCollection">
            <summary>
            Collection class for
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">terminal symbols</see>.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.NonTerminalSymbolsCollection.Add(System.String)">
            <summary>
            Adds a new
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>
            to this collection
            </summary>
            <param key="key">
            The value of the
            <see cref="P:Infragistics.SyntaxParsing.Symbol.Name">Name</see>
            property.
            </param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.NonTerminalSymbolsCollection.Remove(System.String)">
            <summary>
            Removes the specified
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>
            from this collection.
            </summary>
            <param key="key">
            The value of the
            <see cref="P:Infragistics.SyntaxParsing.Symbol.Name">Name</see>
            property of the symbol to remove.
            </param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.NonTerminalSymbolsCollection.Clear">
            <summary>
            Removes all members from this collection.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.NonTerminalSymbolsCollection.Exists(Infragistics.SyntaxParsing.NonTerminalSymbol)">
            <summary>
            Returns a boolean value indicating whether the specified
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>
            exists within this collection.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.NonTerminalSymbolsCollection.Exists(System.String)">
            <summary>
            Returns a boolean value indicating whether a
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>
            with the specified <paramref key="key"/>
            exists within this collection.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.NonTerminalSymbolsCollection.Exists(System.String,Infragistics.SyntaxParsing.NonTerminalSymbol@)">
            <summary>
            Returns a boolean value indicating whether a
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>
            with the specified <paramref key="key"/>
            exists within this collection.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.NonTerminalSymbolsCollection.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.NonTerminalSymbolsCollection.Item(System.String)">
            <summary>
            Returns the instance with the specified <paramref key="value"/>
            </summary>
            <param key="key">
            The
            <see cref="P:Infragistics.SyntaxParsing.Symbol.Name">Name</see>
            of the symbol to return.
            </param>
        </member>
        <member name="P:Infragistics.SyntaxParsing.NonTerminalSymbolsCollection.Count">
            <summary>
            Returns the number of elements in this collection.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.NonTerminalSymbol">
            <summary>
            A grammar
            <see cref="T:Infragistics.SyntaxParsing.Symbol">symbol</see>
            which is composed of some combination of terminal and
            nonterminal symbols; also known as a <i>syntactic variable</i>.
            </summary>
            <remarks>
            <p class="body">
            A non-terminal symbol is basically a container for production rules and
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">terminal symbols</see>.
            The rule tree defined by a non-terminal symbol can be placed at multiple
            locations within the rule tree, providing a mechanism by which to avoid
            duplication of logic.
            </p>
            <p class="body">
            Consider the C# programming language concept of identifiers. Syntactic
            rules apply to what constitutes a valid identifier - it must begin with
            either an alphabetic character or underscore, followed by the same or one
            or more integers, and not be a keyword. In order to define a production
            rule that unambiguously identifies such strings, several criteria are
            necessary; the resulting rule tree looks something like this:
            Identifier
            -&gt; ConcatenationOperator
                -&gt; Matches regex pattern "^[a-zA-Z_][a-zA-Z0-9_]*"
                -&gt; NotAKeyword
                   -&gt; NegationOperator
                      -&gt; AlternationOperator
                         -&gt; "using"
                         -&gt; "namespace"
                         -&gt; "class"
                         -&gt; "public|private|protected|internal"
                         -&gt; ...
            As evidenced by the above example, a fairly extensive rule hierarchy is
            necessary to express even something as simple as an identifier. Considering
            that a full definition for the C# programming language requires checks for
            an identifier in dozens or perhaps hundreds of places within the rule tree,
            the benefit of providing a means by which a "shortcut" form of expression
            can be used should be obvious.
            </p>
            </remarks>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Symbol">
            <summary>
            Encapsulates a symbol for the associated
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Symbol.Name">
            <summary>
            Returns the name of the symbol.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Symbol.Group">
            <summary>
            Returns or sets the
            <see cref="T:Infragistics.SyntaxParsing.SymbolGroup">SymbolGroup</see>
            to which this symbol belongs, or null if no group is assigned.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.NonTerminalSymbol.IsCircularReference(Infragistics.SyntaxParsing.NonTerminalSymbol)">
            <summary>
            Returns true if the specified <paramref name="value"/>
            is referenced by this NonTerminalSymbol, and if the specified
            value refers to this NonTerminalSymbol.
            </summary>
            <param name="value">
            The
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>
            to test.
            </param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.NonTerminalSymbol.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.NonTerminalSymbol.Grammar">
            <summary>
            Returns a reference to the associated
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.NonTerminalSymbol.Rules">
            <summary>
            Returns a collection of
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRule">SyntaxRule</see>
            instances which describe the syntax rules for this
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>.
            </summary>
            <remarks>
            <p class="body">
            The syntax for a grammar is defined by its production rules; the
            production rules for a grammar are exposed via the Rules collection
            of the grammar's
            <see cref="P:Infragistics.SyntaxParsing.Grammar.StartSymbol">StartSymbol</see>.
            </p>
            <p class="body">
            The grammar's
            <see cref="P:Infragistics.SyntaxParsing.Grammar.StartSymbol">StartSymbol</see>
            property references a NonTerminalSymbol which defines the starting
            point for parse operations. The order in which these rules are evaluated
            is determined by the contents of this collection. Each rule therein is
            analyzed by recursively analyzing descendant rules until a
            <see cref="T:Infragistics.SyntaxParsing.TerminalRule">TerminalRule</see>
            is encountered. A TerminalRule has no rules of its own; its purpose
            is to perform the actual parsing to determine whether the current input
            is valid.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.SyntaxParsing.NonTerminalSymbol.CircularReferences">
            <summary>
            Returns a collection containing the
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>
            instances which refer to this instance.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.NonTerminalSymbol.HasCircularReference">
            <summary>
            Returns a boolean value indicating whether this
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>
            contains a descendant rule which refers either directly or indirectly
            back to this rule.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.NonTerminalSymbol.RequiredTerminalSymbol">
            <summary>
            Returns or sets a reference to a
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            for which a token must be produced in order to disambiguate this
            NonTerminalSymbol from other ones which begin with similar rules.
            </summary>
            <remarks>
            <p class="body">
            If two or more NonTerminalRules
            contain the same first terminals, the parser cannot distinguish between
            them until it encounters a token which is disallowed by one of the rules.
            For example, consider two rules, X = (A, B, C) and Y = (A, B, D), both belonging
            to an optional rule, and an input string of "A B D". Assuming rule X is evaluated
            before rule Y, the parser will assume that the input is invalid when it encounters
            the "C", and report errors, since rule X successfully parsed the first terminal,
            but not all of them. Assigning the TerminalSymbol for rule C to the RequiredTerminalSymbol
            property of rule X allows the parser to look ahead to determine whether the minimum
            number of required terminals have been matched; using this example, it will revert
            any consumed input once it determines that rule C has not been satisfied, and then
            move on to rule Y, which will parse the input successfully.
            </p>
            <p class="body">
            When no value is assigned to the RequiredTerminalSymbol property, the TerminalSymbol
            for the first 
            <see cref="T:Infragistics.SyntaxParsing.TerminalRule">TerminalRule</see>
            is used to determine whether the rule partially succeeds.
            </p>
            <p class="body">
            The RequiredTerminalSymbol property is only used when this NonTerminalSymbol's
            rule is a sub-rule of an optional or alternation rule.
            </p>
            </remarks>
            <seealso cref="T:Infragistics.SyntaxParsing.OptionalRule">OptionalRule</seealso>
            <seealso cref="T:Infragistics.SyntaxParsing.AlternationRule">AlternationRule</seealso>
            <seealso cref="T:Infragistics.SyntaxParsing.RepetitionRule">RepetitionRule</seealso>
        </member>
        <member name="P:Infragistics.SyntaxParsing.NonTerminalSymbol.IsStartSymbol">
            <summary>
            Returns a boolean value indicating whether this instance is assigned to the
            <see cref="P:Infragistics.SyntaxParsing.Grammar.StartSymbol">StartSymbol</see>
            property of the associated Grammar.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.NonTerminalSymbol.ReferencingNonTerminalSymbols">
            <summary>
            Returns a read-only collection containing each
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>
            belonging to the same grammar which references this NonTerminalSymbol.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.ParseNode">
            <summary>
            Encapsulates a parsed fragment of code.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.ParseNode.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.ParseNode.Symbol">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.Symbol">Symbol</see>
            with which this rule is associated.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.ParseNode.Nodes">
            <summary>
            Returns a collection which contains the child nodes of this node.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.ParseNode.Rule">
            <summary>
            Returns a reference to the associated syntax rule.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.ParseNode.Token">
            <summary>
            Returns a reference to the associated token, or null
            if this node is not associated with a token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.ParseNode.CharacterPosition">
            <summary>
            Returns the character position of the beginning of the string
            represented by this node.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.ParseNode.TextLength">
            <summary>
            Returns the length of the string represented by this node.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.ParseNodesCollection">
            <summary>
            Contains instances of the
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRule">ParseNode</see>
            class.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.ParseNodesCollection.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.ParseNodesCollection.Item(System.Int32)">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.ParseNode">node</see>
            at the specified <paramref key="index"/>.
            </summary>
            <param key="index">The ordinal position of the node within this collection.</param>
        </member>
        <member name="P:Infragistics.SyntaxParsing.ParseNodesCollection.Count">
            <summary>
            Returns the number of elements in this collection.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Parser.Parse(System.String)">
            <summary>
            Parses the specified <paramref key="input"/> and returns the resulting
            <see cref="T:Infragistics.SyntaxParsing.ParseTree">ParseTree</see>.
            </summary>
            <param key="input">
            The text to be parsed, i.e., the code to be validated against the associated Grammar.
            </param>
            <returns>
            A
            <see cref="T:Infragistics.SyntaxParsing.ParseTree">ParseTree</see>
            instance which contains the resulting tokens, arranged
            hierarchically based on the rule structure for the associated
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            </returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Parser.Analyze(Infragistics.SyntaxParsing.ParseTree,Infragistics.SyntaxParsing.Parser.NonTerminalSymbolCallStack,Infragistics.SyntaxParsing.SyntaxRuleBase,System.Boolean,System.Collections.Generic.List{Infragistics.SyntaxParsing.ParseNode}@,System.Boolean@,Infragistics.SyntaxParsing.NonTerminalSymbol@)">
            <summary>
            Handles rule analysis for all cases. This method calls
            itself recursively, starting from the rule associated with
            the Grammar's StartSymbol. Each sub-rule is analyzed accordingly;
            all rules except 'Terminal' check the result of recursive calls,
            whereas the 'Terminal' case does the actual character matching.
            </summary>
            <param key="parseTree">A reference to the resulting ParseTree</param>
            <param key="callStack">The NonTerminalSymbols in the call chain</param>
            <param key="rule">The rule to analyze.</param>
            <param key="handlePriorityRules">Specifies whether the caller is handling PrioritySymbols.</param>
            <param key="nodes">[ref] Upon return, contains a list of the resulting ParseNodes.</param>
            <param key="endOfStream">[ref] Upon return, contains a boolean value indicating whether all input has been processed.</param>
            <param key="returnTo">[out] Upon return, references the NonTerminalSymbol to which execution should return because of a failure generated by its RequiredTerminalSymbol.</param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Parser.HandleWhitespace(Infragistics.SyntaxParsing.ParseTree)">
            <summary>
            Handles any whitespace encountered based on the rules defined
            by the associated Grammar. Returns the number of characters
            consumed.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Parser.HandleWhitespace(Infragistics.SyntaxParsing.ParseTree,Infragistics.SyntaxParsing.TerminalSymbol)">
            <summary>
            Handles any whitespace encountered based on the rules defined
            by the associated Grammar. Returns the number of characters
            consumed.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Parser.TokenAnalysisInfo.ToString">
            <summary>ToString</summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.ParseTree">
            <summary>
            Encapsulates the concrete syntax tree which results from the
            parsing of an input string, based on the rules defined by the
            associated
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.ParseTree.FindMatchingNode(Infragistics.SyntaxParsing.ParseNode)">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.ParseNode">ParseNode</see>
            which matches the specified <paramref key="node"/>.
            </summary>
            <param key="node">
            The
            <see cref="T:Infragistics.SyntaxParsing.ParseNode">ParseNode</see>
            to be matched.
            </param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.ParseTree.FindNode(System.Int32)">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.ParseNode">ParseNode</see>
            at the specified <paramref key="characterPosition"/> or
            null if the specified characterPosition does not coincide
            with any node.
            </summary>
            <param key="characterPosition">The zero-based character position at which to search.</param>
            <returns>
            A
            <see cref="T:Infragistics.SyntaxParsing.ParseNode">ParseNode</see>
            instance or null.
            </returns>
        </member>
        <member name="P:Infragistics.SyntaxParsing.ParseTree.Grammar">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            instance associated with this ParseTree.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.ParseTree.Nodes">
            <summary>
            Returns the root collection of
            <see cref="T:Infragistics.SyntaxParsing.ParseNode">ParseNode</see>
            instances which comprise this ParseTree instance.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.ParseTree.Errors">
            <summary>
            Returns a flattened list of the
            <see cref="T:Infragistics.SyntaxParsing.ErrorToken">ErrorToken</see>
            instances which were generated during the course of parsing
            the input string.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.ParseTree.HasErrors">
            <summary>
            Returns a boolean value indicating whether this tree contains parse errors.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.ParseTree.Tokens">
            <summary>
            Returns a flattened list of the
            <see cref="T:Infragistics.SyntaxParsing.ParseTreeTokenBase">tokens</see>
            for this ParseTree.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.ParseNodeHandler">
            <summary>
            Defines the signature for a method which takes a
            <see cref="T:Infragistics.SyntaxParsing.ParseTree">ParseTree</see>
            and a
            <see cref="T:Infragistics.SyntaxParsing.ParseNode">ParseNode</see>
            instance as parameters.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Scanner.Initialize(System.String)">
            <summary>
            Initializes this instance for use with a new scan operation.
            </summary>
            <param key="input">The string to be scanned.</param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Scanner.Consume(System.Int32)">
            <summary>
            Consumes the next <paramref key="charCount"/> characters
            by appending new characters to the Input property, and
            incrementing the value of the CharacterPosition property by the
            specified amount.
            </summary>
            <param key="charCount">The number of characters to consume.</param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Scanner.WasNonWhitespaceConsumed(System.Int32,System.Text.RegularExpressions.Regex)">
            <summary>
            Returns a boolean value indicating whether any significant
            characters were consumed since <paramref key="charPosBefore"/>.
            </summary>
            <param key="charPosBefore">The character position at which to start the backtracking.</param>
            <param key="whitespaceRegex">The regex expression for whitespace.</param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Scanner.Revert(System.Int32,System.Boolean@)">
            <summary>
            Reverts the state of this instance based on the specified
            <paramref key="charPos"/>.
            </summary>
            <param key="charPos">The value to which the CharacterPosition property will be set.</param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Scanner.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Scanner.CharPos">
            <summary>
            Returns the current character position. As input is consumed,
            this value is updated to reflect the next character(s) to be
            scanned.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Scanner.InitialInput">
            <summary>
            Returns the original string.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Scanner.Input">
            <summary>
            Returns the text which has yet to be parsed, i.e.,
            this.Input.Substring( this.CharacterPosition )
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Scanner.LastMatchLength">
            <summary>
            Returns the length of the last string that was successfully parsed.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Scanner.Consumed">
            <summary>
            Returns the characters that have already been successfully
            parsed, i.e., this.Input.Substring( 0, this.CharacterPosition - 1 )
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Scanner.Version">
            <summary>
            Returns a version number that is incremented each
            time a new scan operation begins.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.SymbolsCollection">
            <summary>
            Collection class for
            <see cref="T:Infragistics.SyntaxParsing.Symbol">symbols</see>.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SymbolsCollection.Add(Infragistics.SyntaxParsing.Symbol)">
            <summary>
            Adds the specified 
            <see cref="T:Infragistics.SyntaxParsing.Symbol">Symbol</see>
            to this collection.
            </summary>
            <param key="symbol">
            The
            <see cref="T:Infragistics.SyntaxParsing.Symbol">symbol</see>
            to add.
            </param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SymbolsCollection.Remove(Infragistics.SyntaxParsing.Symbol)">
            <summary>
            Removes the specified 
            <see cref="T:Infragistics.SyntaxParsing.Symbol">Symbol</see>
            from this collection.
            </summary>
            <param key="symbol">
            The
            <see cref="T:Infragistics.SyntaxParsing.Symbol">symbol</see>
            to remove.
            </param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SymbolsCollection.Clear">
            <summary>
            Removes all elements from this collection.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.SymbolsCollection.Item(System.Int32)">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.Symbol">Symbol</see>
            at the specified ordinal position.
            </summary>
            <param key="index">
            The ordinal position of the symbol to return.
            </param>
        </member>
        <member name="P:Infragistics.SyntaxParsing.SymbolsCollection.Count">
            <summary>
            Returns the number of elements in this collection.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.SymbolGroup">
            <summary>
            Provides a way to group
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">terminal</see>
            or
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">non-terminal</see>
            symbols which are similar.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SymbolGroup.Add(Infragistics.SyntaxParsing.Symbol)">
            <summary>
            Adds the specified
            <see cref="T:Infragistics.SyntaxParsing.Symbol">Symbol</see>
            to this group.
            </summary>
            <param key="symbol">
            The
            <see cref="T:Infragistics.SyntaxParsing.Symbol">symbol</see>
            to add.
            </param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SymbolGroup.Remove(Infragistics.SyntaxParsing.Symbol)">
            <summary>
            Adds the specified
            <see cref="T:Infragistics.SyntaxParsing.Symbol">Symbol</see>
            to this group.
            </summary>
            <param key="symbol">
            The
            <see cref="T:Infragistics.SyntaxParsing.Symbol">symbol</see>
            to add.
            </param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SymbolGroup.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.SymbolGroup.TerminalBoundary">
            <summary>
            Returns a
            <see cref="T:Infragistics.SyntaxParsing.TerminalBoundary">TerminalBoundary</see>
            instance which defines the parsing boundary for terminal symbols which
            belong to this group.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.SymbolGroup.Key">
            <summary>
            Returns a string value which identifies this instance
            in the collection to which it belongs.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.SymbolGroup.Name">
            <summary>
            Returns or sets the human-readable key for this group.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.SymbolGroup.Description">
            <summary>
            Returns or sets the human-readable description of this group.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.SymbolGroup.Symbols">
            <summary>
            Returns an enumerator containing each
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            and
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>
            which belongs to this group.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.SymbolGroupsCollection">
            <summary>
            Contains instances of the
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRule">SyntaxRule</see>
            class.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SymbolGroupsCollection.Add(System.String)">
            <summary>
            Adds a new
            <see cref="T:Infragistics.SyntaxParsing.SymbolGroup">SymbolGroup</see>
            instance to the collection.
            </summary>
            <param key="key">
            The value of the SymbolGroup's
            <see cref="P:Infragistics.SyntaxParsing.SymbolGroup.Key">Key</see>
            property.
            </param>
            <returns>
            A reference to the
            <see cref="T:Infragistics.SyntaxParsing.SymbolGroup">SymbolGroup</see>
            that was created.
            </returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SymbolGroupsCollection.Clear">
            <summary>
            Removes all elements from this collection
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SymbolGroupsCollection.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.SymbolGroupsCollection.Item(System.String)">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.SymbolGroup">SymbolGroup</see>
            at the specified <paramref key="index"/>.
            </summary>
            <param key="key">The key of the item to be returned.</param>
        </member>
        <member name="P:Infragistics.SyntaxParsing.SymbolGroupsCollection.Count">
            <summary>
            Returns the number of elements in this collection.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.SyntaxRulesCollection">
            <summary>
            Contains instances of the
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRule">SyntaxRule</see>
            class.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxRulesCollection.IndexOf(Infragistics.SyntaxParsing.NonTerminalSymbol)">
            <summary>
            Returns the index of the rule associated with the specified
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>,
            or -1 if no such rule exists
            </summary>
            <param key="nonTerminalSymbol">
            The
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>
            to locate.
            </param>
            <returns>The index or -1.</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxRulesCollection.IndexOf(Infragistics.SyntaxParsing.TerminalSymbol)">
            <summary>
            Returns the index of the rule associated with the specified
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>,
            or -1 if no such rule exists
            </summary>
            <param key="terminalSymbol">
            The
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            to locate.
            </param>
            <returns>The index or -1.</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxRulesCollection.AddAlternationRule">
            <summary>
            Adds a new
            <see cref="T:Infragistics.SyntaxParsing.AlternationRule">AlternationRule</see>
            to this collection.
            </summary>
            <returns>
            The created
            <see cref="T:Infragistics.SyntaxParsing.AlternationRule">AlternationRule</see>.
            </returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxRulesCollection.AddConcatenationRule">
            <summary>
            Adds a new
            <see cref="T:Infragistics.SyntaxParsing.ConcatenationRule">ConcatenationRule</see>
            to this collection.
            </summary>
            <returns>
            The created
            <see cref="T:Infragistics.SyntaxParsing.ConcatenationRule">ConcatenationRule</see>.
            </returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxRulesCollection.AddNegationRule">
            <summary>
            Adds a new
            <see cref="T:Infragistics.SyntaxParsing.NegationRule">NegationRule</see>
            to this collection.
            </summary>
            <returns>
            The created
            <see cref="T:Infragistics.SyntaxParsing.NegationRule">NegationRule</see>.
            </returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxRulesCollection.AddOptionalRule">
            <summary>
            Adds a new
            <see cref="T:Infragistics.SyntaxParsing.OptionalRule">OptionalRule</see>
            to this collection.
            </summary>
            <returns>
            The created
            <see cref="T:Infragistics.SyntaxParsing.OptionalRule">OptionalRule</see>.
            </returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxRulesCollection.AddRepetitionRule(System.Int32)">
            <summary>
            Adds a new
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRule">SyntaxRule</see>
            to this collection with a
            <see cref="P:Infragistics.SyntaxParsing.SyntaxRuleBase.RuleType">RuleType</see>
            of 'Repetition'.
            </summary>
            <param key="repetitions">
            The repetition factor, i.e., the exact number of times each sub-rule
            must be satisfied in order for the rule to be satisfied.
            </param>
            <returns>
            The created
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRule">SyntaxRule</see>.
            </returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxRulesCollection.AddRepetitionRule(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Adds a new
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRule">SyntaxRule</see>
            to this collection with a
            <see cref="P:Infragistics.SyntaxParsing.SyntaxRuleBase.RuleType">RuleType</see>
            of 'Repetition'.
            </summary>
            <param key="minimumOccurrences">
            The minimum repetition factor, i.e., the minimum number of times each sub-rule
            must be satisfied in order for the rule to be satisfied.
            </param>
            <param key="maximumOccurrences">
            The maximum repetition factor, i.e., the maximum number of times each sub-rule
            must be satisfied in order for the rule to be satisfied. Specify null for no
            limit, i.e., any number of occurrences satisifies the rule, provided that the
            minimum number of occurrences is satisfied.
            </param>
            <returns>
            The created
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRule">SyntaxRule</see>.
            </returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxRulesCollection.AddConjunctionRule">
            <summary>
            Adds a new
            <see cref="T:Infragistics.SyntaxParsing.ConjunctionRule">ConjunctionRule</see>
            to this collection.
            </summary>
            <returns>
            The created
            <see cref="T:Infragistics.SyntaxParsing.ConjunctionRule">ConjunctionRule</see>.
            </returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxRulesCollection.AddTerminalRule(Infragistics.SyntaxParsing.TerminalSymbol)">
            <summary>
            Adds a new
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRule">SyntaxRule</see>
            to this collection with a
            <see cref="P:Infragistics.SyntaxParsing.SyntaxRuleBase.RuleType">RuleType</see>
            of 'Terminal'.
            </summary>
            <param key="factor">
            The 
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            associated with the rule.
            </param>
            <returns>
            The created
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRule">SyntaxRule</see>.
            </returns>
            <remarks>
            <p class="body">
            A terminal rule represents the endpoint of a production rule.
            The terminal rule attempts to parse the input and if the attempt
            is successful, the matching characters are consumed and parsing
            continues. If the attempt fails, the parent rule is notified and
            determines whether an error is logged.
            </p>
            <p class="body">
            A terminal rule cannot have sub-rules; attempting to add members to
            the Rules collection of a SyntaxRule whose RuleType returns 'Terminal'
            results in an exception being thrown.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxRulesCollection.AddNonTerminalRule(Infragistics.SyntaxParsing.NonTerminalSymbol)">
            <summary>
            Adds a new
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalRule">NonTerminalRule</see>
            to this collection.
            </summary>
            <param key="factor">
            The 
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>
            associated with the rule.
            </param>
            <returns>
            The created
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalRule">NonTerminalRule</see>.
            </returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxRulesCollection.Clear">
            <summary>
            Removes all elements from this collection.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxRulesCollection.Remove(Infragistics.SyntaxParsing.SyntaxRule)">
            <summary>
            Removes the specified rule from this collection.
            </summary>
            <param key="rule">The SyntaxRule to remove.</param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxRulesCollection.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.SyntaxRulesCollection.Item(System.Int32)">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleBase">rule</see>
            at the specified <paramref key="index"/>.
            </summary>
            <param key="index">The ordinal position of the rule within this collection.</param>
        </member>
        <member name="P:Infragistics.SyntaxParsing.SyntaxRulesCollection.Count">
            <summary>
            Returns the number of elements in this collection.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.SyntaxRule">
            <summary>
            Encapsulates a syntactic rule for the associated
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.SyntaxRuleBase">
            <summary>
            Base class for
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRule">syntax rules</see>
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxRuleBase.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.SyntaxRuleBase.RuleType">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleType">SyntaxRuleType</see>
            constant which determines the behavior for this syntax rule.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.SyntaxRule.Rules">
            <summary>
            Returns a collection of
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleBase">SyntaxRuleBase</see>-derived
            objects which represent the sub-rules for this
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRule">rule</see>.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.AlternationRule">
            <summary>
            Class which encapsulates the behavior of the
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleType">AlternationOperator</see>
            syntax rule.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.AlternationRule.RuleType">
            <summary>
            Returns the 
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleType">SyntaxRuleType</see>
            constant associated with this class ('AlternationOperator').
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.ConcatenationRule">
            <summary>
            Class which encapsulates the behavior of the
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleType">ConcatenationOperator</see>
            syntax rule.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.ConcatenationRule.RuleType">
            <summary>
            Returns the 
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleType">SyntaxRuleType</see>
            constant associated with this class ('ConcatenationOperator').
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.OptionalRule">
            <summary>
            Class which encapsulates the behavior of the
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleType">Optional</see>
            syntax rule.
            </summary>
            <remarks>
            <p class="body">
            An OptionalRule is the equivalent of a
            <see cref="T:Infragistics.SyntaxParsing.RepetitionRule">RepetitionRule</see>
            whose
            <see cref="P:Infragistics.SyntaxParsing.RepetitionRule.MinimumOccurrences">MinimumOccurrences</see>
            property is set to zero, and whose
            <see cref="P:Infragistics.SyntaxParsing.RepetitionRule.MaximumOccurrences">MaximumOccurrences</see>
            property is set to one.
            </p>
            </remarks>
        </member>
        <member name="T:Infragistics.SyntaxParsing.RepetitionRuleBase">
            <summary>
            Base class for the
            <see cref="T:Infragistics.SyntaxParsing.RepetitionRule">RepetitionRule</see>
            and
            <see cref="T:Infragistics.SyntaxParsing.OptionalRule">OptionalRule</see>
            classes.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.RepetitionRuleBase.RuleType">
            <summary>
            Returns the 
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleType">SyntaxRuleType</see>
            constant associated with this class.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.RepetitionRuleBase.IsOptional">
            <summary>
            Returns a boolean value indicating whether this rule must
            succeed at least one time in order for the rule to be
            satisfied.
            </summary>
            <remarks>
            <p class="body">
            This property always returns true for
            <see cref="T:Infragistics.SyntaxParsing.OptionalRule">optional</see>
            rules.
            </p>
            <p class="body">
            For
            <see cref="T:Infragistics.SyntaxParsing.RepetitionRule">repetition</see>
            rules, this property returns true if the value of the
            <see cref="P:Infragistics.SyntaxParsing.RepetitionRule.MinimumOccurrences">MinimumOccurrences</see>
            property is equal to zero, and false otherwise.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.SyntaxParsing.OptionalRule.RuleType">
            <summary>
            Returns the 
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleType">SyntaxRuleType</see>
            constant associated with this class ('Optional').
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.ConjunctionRule">
            <summary>
            Class which encapsulates the behavior of the
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleType">ConjunctionOperator</see>
            syntax rule.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.ConjunctionRule.RuleType">
            <summary>
            Returns the 
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleType">SyntaxRuleType</see>
            constant associated with this class ('ConjunctionOperator').
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.RepetitionRule">
            <summary>
            Class which encapsulates the behavior of the
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleType">Repetition</see>
            syntax rule.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.RepetitionRule.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.RepetitionRule.MinimumOccurrences">
            <summary>
            Returns the minimum number of repetitions required in order for the rule
            to be satisfied.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.RepetitionRule.MaximumOccurrences">
            <summary>
            Returns the number of repetitions which must not be exceeded in order
            for the rule to be satisfied, or null if there is no upper limit.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.RepetitionRule.RuleType">
            <summary>
            Returns the 
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleType">SyntaxRuleType</see>
            constant associated with this class ('Repetition').
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.NegationRule">
            <summary>
            Class which encapsulates the behavior of the
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleType">NegationOperator</see>
            syntax rule.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.NegationRule.RuleType">
            <summary>
            Returns the 
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleType">SyntaxRuleType</see>
            constant associated with this class ('NegationOperator').
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.TerminalRule">
            <summary>
            Class which encapsulates the behavior of the
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleType">Terminal</see>
            syntax rule.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TerminalRule.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TerminalRule.TerminalSymbol">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            associated with this rule.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TerminalRule.RuleType">
            <summary>
            Returns the 
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleType">SyntaxRuleType</see>
            constant associated with this class ('Terminal').
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.NonTerminalRule">
            <summary>
            Class which encapsulates the behavior of the
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleType">NonTerminal</see>
            syntax rule.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.NonTerminalRule.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.NonTerminalRule.NonTerminalSymbol">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>
            associated with this rule.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.NonTerminalRule.RuleType">
            <summary>
            Returns the 
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleType">SyntaxRuleType</see>
            constant associated with this class ('NonTerminal').
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.NonTerminalRule.Rules">
            <summary>
            Returns a collection of
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleBase">SyntaxRuleBase</see>-derived
            objects which represent the sub-rules for this
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRule">rule</see>.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.NonTerminalRule.HasCircularReference">
            <summary>
            Returns a boolean value indicating whether this rule
            contains a descendant rule which refers to this rule.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.FirstTerminalHelper.ToString">
            <summary>
            Returns the string representation of this object;
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.MissingTerminalRuleException">
            <summary>
            Thrown when the
            <see cref="M:Infragistics.SyntaxParsing.Grammar.Parse(System.String)">Parse</see>
            method is called on a start symbol which contains one or more
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleBase">rules</see>
            which do not contain a
            <see cref="T:Infragistics.SyntaxParsing.TerminalRule">TerminalRule</see>.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.MissingTerminalRuleException.ToString">
            <summary>
            Returns the string representation of this exception.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.MissingTerminalRuleException.Rule">
            <summary>
            Returns a reference to the
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRule">rule</see>
            which caused this exception to be thrown.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.MissingTerminalRuleException.Message">
            <summary>
            Returns the message for this exception.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.InvalidCircularReferenceException">
            <summary>
            Thrown when the
            <see cref="M:Infragistics.SyntaxParsing.Grammar.Parse(System.String)">Parse</see>
            method is called on a start symbol which contains a
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalRule">NonTerminalRule</see>
            which has a circular reference that is not preceded by a
            <see cref="T:Infragistics.SyntaxParsing.TerminalRule">TerminalRule</see>.
            </summary>
            <remarks>
            <p class="body">
            A circular reference occurs when one NonTerminalRule contains another
            NonTerminalRule in its descendancy chain which refers back to the first
            NonTerminalRule. Such references are supported, but a necessary caviat
            is that a TerminalRule must appear in the descendancy chain before the
            circular reference. This is an anti-recursion measure; if, for example,
            NonTerminalSymbol 'A' contains a rule for NonTerminalSymbol 'B', and 'B'
            contains a rule for 'A', infinite recursion would ensue as each rule
            refers to the other during the evaluation process. The recursion can be
            broken by an intervening TerminalRule, so that circular references are
            only evaluated in the event that the TerminalRule succeeds, and the state
            of the input string is changed.
            </p>
            </remarks>
            <seealso cref="P:Infragistics.SyntaxParsing.NonTerminalSymbol.HasCircularReference">HasCircularReference property (NonTerminalSymbol class)</seealso>
        </member>
        <member name="M:Infragistics.SyntaxParsing.InvalidCircularReferenceException.ToString">
            <summary>
            Returns the string representation of this exception.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.InvalidCircularReferenceException.Symbol">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">symbol</see>
            which caused this exception to be thrown.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.InvalidCircularReferenceException.Reference">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">symbol</see>
            which refers to the symbol which caused the exception to be thrown.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.InvalidCircularReferenceException.Message">
            <summary>
            Returns the message for this exception.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.InvalidDescendantRuleException">
            <summary>
            Thrown when the first descendant rule of a
            <see cref="T:Infragistics.SyntaxParsing.ConjunctionRule">ConjunctionRule</see>
            or
            <see cref="T:Infragistics.SyntaxParsing.NegationRule">NegationRule</see>
            is a NegationRule.
            </summary>
            <remarks>
            <p class="body">
            The first descendant rule of a ConjunctionRule or NegationRule must
            generate a token upon success; because a NegationRule does not, it
            is not valid as the first descendant of a ConjunctionRule or NegationRule.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.SyntaxParsing.InvalidDescendantRuleException.ParentRule">
            <summary>
            A reference to the
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRule">SyntaxRule</see>
            for which this exception was thrown.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.InvalidDescendantOfConjunctionRuleException">
            <summary>
            Thrown when a descendant rule of a
            <see cref="T:Infragistics.SyntaxParsing.ConjunctionRule">ConjunctionRule</see>
            or
            <see cref="T:Infragistics.SyntaxParsing.NegationRule">NegationRule</see>
            is invalid.
            </summary>
            <remarks>
            <p class="body">
            Each descendant rule of a ConjunctionRule or NegationRule must be one
            of the following rules in order to be valid:
            <ul>
                <li><see cref="T:Infragistics.SyntaxParsing.TerminalRule">TerminalRule</see></li>
                <li><see cref="T:Infragistics.SyntaxParsing.NonTerminalRule">NonTerminalRule</see></li>
                <li><see cref="T:Infragistics.SyntaxParsing.AlternationRule">AlternationRule</see></li>
                <li><see cref="T:Infragistics.SyntaxParsing.ConjunctionRule">ConjunctionRule</see></li>
                <li><see cref="T:Infragistics.SyntaxParsing.NegationRule">NegationRule</see></li>
            </ul>
            </p>
            <p class="body">
            This restriction is imposed so that each sub-rule only produces one token,
            which is necessary in order to compare each sub-rule to the others.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.SyntaxParsing.InvalidDescendantOfConjunctionRuleException.ToString">
            <summary>
            Returns the string representation of this exception.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.InvalidDescendantOfConjunctionRuleException.ConjunctionRule">
            <summary>
            A reference to the
            <see cref="T:Infragistics.SyntaxParsing.ConjunctionRule">ConjunctionRule</see>
            for which this exception was thrown.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.InvalidDescendantOfConjunctionRuleException.Descendant">
            <summary>
            A reference to the
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRule">SyntaxRule</see>
            which caused the first descendant rule to be an invalid first
            descendant rule of the
            <see cref="P:Infragistics.SyntaxParsing.InvalidDescendantOfConjunctionRuleException.ConjunctionRule">ConjunctionRule</see>
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.InvalidDescendantOfConjunctionRuleException.Message">
            <summary>
            Returns the message for this exception.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.NegationRuleIsFirstDescendantException">
            <summary>
            Thrown when a
            <see cref="T:Infragistics.SyntaxParsing.NegationRule">NegationRule</see>
            appears as the first sub-rule.
            </summary>
            <remarks>
            <p class="body">
            A NegationRule cannot appear as the first sub-rule.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.SyntaxParsing.NegationRuleIsFirstDescendantException.ToString">
            <summary>
            Returns the string representation of this exception.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.NegationRuleIsFirstDescendantException.NegationRule">
            <summary>
            A reference to the
            <see cref="T:Infragistics.SyntaxParsing.NegationRule">NegationRule</see>
            which caused this exception to be thrown.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.NegationRuleIsFirstDescendantException.Message">
            <summary>
            Returns the message for this exception.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.TerminalBoundary">
            <summary>
            Provides a way to define a parsing boundary for a
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>.
            </summary>
            <remarks>
            <p class="body">
            Usually a token must be followed by whitespace in order to distinguish
            it unambiguously from other tokens. For example, keywords (in the C#
            programming language) such as "using", "class", and "namespace" must
            be followed by either whitespace or special characters such as an open
            curly brace or semicolon. This nuance makes it possible to name a class
            "class1" - the parser knows that, since the phrase "class" is not followed
            by whitespace or a special character, it is distinguishable from the keyword,
            and as such is accepted as a valid identifier.
            </p>
            <p class="body">
            In order to make this behavior possible without requiring each production
            rule to explicitly include rules to account for it, the TerminalBoundary class
            provides a way to stipulate that the text parsed by a terminal must also
            be followed by a given string of characters in order for the rule to succeed.
            </p>
            </remarks>
            <seealso cref="P:Infragistics.SyntaxParsing.Grammar.TerminalBoundary">TerminalBoundary property (Grammar class)</seealso>
            <seealso cref="P:Infragistics.SyntaxParsing.TerminalSymbol.Boundary">Boundary property (TerminalSymbol class)</seealso>
            <seealso cref="P:Infragistics.SyntaxParsing.Grammar.WhitespaceRegexPattern">WhitespaceRegexPattern property (Grammar class)</seealso>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TerminalBoundary.AddTerminalSymbol(Infragistics.SyntaxParsing.TerminalSymbol)">
            <summary>
            Adds the specified
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            to the list of symbols which will be evaluated to determine whether
            a parsed string contains the required boundary.
            </summary>
            <param key="terminalSymbol">The terminal symbol to add.</param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TerminalBoundary.ClearTerminalSymbols">
            <summary>
            Removes all items from the
            <see cref="P:Infragistics.SyntaxParsing.TerminalBoundary.TerminalSymbols">TerminalSymbols</see>
            list.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TerminalBoundary.Validate(System.String)">
            <summary>
            Returns a boolean value indicating whether the specified
            <paramref key="input"/> string begins with the parsing
            boundary defined by this instance.
            </summary>
            <param key="input">The string to evaluate.</param>
            <returns>True if the string begins with the required parsing boundary.</returns>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TerminalBoundary.Enabled">
            <summary>
            Returns or sets a value indicating whether this object is enabled.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TerminalBoundary.Pattern">
            <summary>
            Returns or sets the regular expression pattern which is evaluated
            to determine whether a parsed string contains the required boundary.
            </summary>
            <remarks>
            <p class="body">
            The Pattern property and the
            <see cref="P:Infragistics.SyntaxParsing.TerminalBoundary.TerminalSymbols">TerminalSymbols</see>
            property are intended to be mutually exclusive, i.e., only one or the other should
            be used, but not both. In cases where both are set, the Pattern property takes precedence.
            </p>
            </remarks>
            <seealso cref="P:Infragistics.SyntaxParsing.Grammar.TerminalBoundary">TerminalBoundary property (Grammar class)</seealso>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TerminalBoundary.TerminalSymbols">
            <summary>
            Returns a list of the
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            instances which are evaluated to determine whether a parsed string
            contains the required boundary.
            </summary>
            <remarks>
            <p class="body">
            The TerminalSymbols property and the
            <see cref="P:Infragistics.SyntaxParsing.TerminalBoundary.Pattern">Pattern</see>
            property are intended to be mutually exclusive, i.e., only one or the other should
            be used, but not both. In cases where both are set, the Pattern property takes precedence.
            </p>
            <p class="body">
            When the Pattern property is not set, and the list of TerminalSymbols contains
            one or more elements, the input string is evaluated by each TerminalSymbol
            in that list until the first match is made.
            </p>
            </remarks>
        </member>
        <member name="T:Infragistics.SyntaxParsing.TerminalSymbolsCollection">
            <summary>
            Collection class for
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">terminal symbols</see>.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TerminalSymbolsCollection.Add(System.String,System.String,Infragistics.SyntaxParsing.TerminalSymbolComparison)">
            <summary>
            Adds a new
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            to this collection
            </summary>
            <param key="key">
            The value of the
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.Value">Value</see>
            property.
            </param>
            <param key="comparison">
            The value of the
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.Comparison">Comparison</see>
            property.
            </param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TerminalSymbolsCollection.Remove(System.String)">
            <summary>
            Removes the specified
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            from this collection.
            </summary>
            <param key="key">
            The value of the
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.Value">Value</see>
            property of the symbol to remove.
            </param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TerminalSymbolsCollection.Clear">
            <summary>
            Removes all members from this collection.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TerminalSymbolsCollection.Exists(Infragistics.SyntaxParsing.TerminalSymbol)">
            <summary>
            Returns a boolean value indicating whether the specified
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            exists within this collection.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TerminalSymbolsCollection.Exists(System.String)">
            <summary>
            Returns a boolean value indicating whether a
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            with the specified <paramref key="value"/>
            exists within this collection.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TerminalSymbolsCollection.Exists(System.String,Infragistics.SyntaxParsing.TerminalSymbol@)">
            <summary>
            Returns a boolean value indicating whether a
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            with the specified <paramref key="value"/>
            exists within this collection.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TerminalSymbolsCollection.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TerminalSymbolsCollection.Item(System.String)">
            <summary>
            Returns the instance with the specified <paramref key="value"/>
            </summary>
            <param key="value">
            The
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.Value">Value</see>
            of the symbol to return.
            </param>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TerminalSymbolsCollection.Count">
            <summary>
            Returns the number of elements in this collection.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.TerminalSymbol">
            <summary>
            An irreducible element of the associated
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            which can appear in the inputs to or outputs from the
            production rules of the grammar.
            </summary>
            <remarks>
            <p class="body">
            A terminal symbol can be a literal string or a regular expression.
            This literal string or regular expression is compared to strings
            in the text being analyzed by the syntax analysis layer when
            determining whether a statement is valid in the context of the
            associated grammar.
            </p>
            <p class="body">
            A terminal symbol represents the terminal point for a production rule.
            Production rules such as ConcatenationOperator, AlternationOperator, SyntacticFactor, etc.
            can be likened to logical tokens, whereas a terminal symbol does the
            actual character matching. All production rules must produce a rule tree
            which contains at least one
            <see cref="T:Infragistics.SyntaxParsing.TerminalRule">TerminalRule</see>
            as a leaf node, or an exception is thrown when the grammar's
            <see cref="M:Infragistics.SyntaxParsing.Grammar.Parse(System.String)">Parse</see>
            method is called.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TerminalSymbol.ResetIsBoundary">
            <summary>
            Restores the value of the
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.IsBoundary">IsBoundary</see>
            property to its default value;
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TerminalSymbol.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TerminalSymbol.Parse(System.String)">
            <summary>
            Parses the specified <paramref key="value"/> and returns
            a boolean value indicating whether the value was successfully
            parsed.
            </summary>
            <param key="value">The string to parse.</param>
            <returns>
            A boolean value specifying whether the <paramref key="value"/> was successfully parsed.
            </returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TerminalSymbol.Parse(System.String,System.String@)">
            <summary>
            Parses the specified <paramref key="value"/> and returns
            a boolean value indicating whether the value was successfully
            parsed.
            </summary>
            <param key="value">The string to parse.</param>
            <param key="match">
            [out] Upon return, contains the matched text, or null if no match was made.
            This string is always a substring of the specified <paramref key="value"/>.
            </param>
            <returns>
            A boolean value specifying whether the <paramref key="value"/> was successfully parsed.
            </returns>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TerminalSymbol.IsExplicitlyNamed">
            <summary>
            Returns a boolean value indicating whether a value is explicitly assigned to the
            <see cref="P:Infragistics.SyntaxParsing.Symbol.Name">Name</see>
            property.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TerminalSymbol.Boundary">
            <summary>
            Returns a
            <see cref="T:Infragistics.SyntaxParsing.TerminalBoundary">TerminalBoundary</see>
            instance which defines the parsing boundary for this terminal symbol.
            </summary>
            <seealso cref="P:Infragistics.SyntaxParsing.Grammar.TerminalBoundary">TerminalBoundary property (Grammar class)</seealso>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TerminalSymbol.Grammar">
            <summary>
            Returns a reference to the associated
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TerminalSymbol.MatchingSymbol">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            which matches this terminal symbol, or null if this terminal symbol
            is not matched.
            </summary>
            <remarks>
            <p class="body">
            The MatchingSymbol property can be used to pair symbols which are
            complementary, with one symbol representing the starting point for
            a block of content and the other representing the endpoint. For example,
            many programming languages use character pairs such as open and close
            parentheses, curly braces, and square brackets to enclose code fragments.
            The MatchingSymbol property makes it possible to pair such symbols, so
            that grammar consumers can easily implement things like brace matching
            and code folding.
            </p>
            </remarks>
            <seealso cref="M:Infragistics.SyntaxParsing.Grammar.AssignTerminalSymbolMatch(Infragistics.SyntaxParsing.TerminalSymbol,Infragistics.SyntaxParsing.TerminalSymbol)">AssignTerminalSymbolMatch</seealso>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TerminalSymbol.Value">
            <summary>
            Returns the value associated with this terminal symbol.
            </summary>
            <remarks>
            <p class="body">
            When a string is compiled against the associated
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>,
            this value is used to compare values in the string being
            compiled. The manner in which the values are compared is
            determined by the value of the
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.Comparison">Comparison</see>
            property.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TerminalSymbol.Description">
            <summary>
            Returns or sets the description associated with this terminal symbol.
            </summary>
            <remarks>
            <p class="body">
            The Description property is intended to be used to provide a brief
            description of the tokens generated by this symbol.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TerminalSymbol.Comparison">
            <summary>
            Returns a value which determines the manner in which
            values in the string being compiled are compared against this
            terminal symbol.
            </summary>
            <remarks>
            <p class="body">
            Terminal symbols support three types of character matching:
            literal, both with and without regard to character casing,
            and regular expression.
            </p>
            <p class="body">
            For example, to create a terminal symbol which matches text
            containing only alphabetic characters, set the Comparison
            property to 'RegularExpression', and assign the value '[a-zA-Z]*'
            to the
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.Value">Value</see>
            property.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TerminalSymbol.GeneratesToken">
            <summary>
            Returns a boolean value indicating whether this symbol causes a
            <see cref="T:Infragistics.SyntaxParsing.Token">token</see>
            to be generated when it is used to parse output during syntactic
            analysis.
            </summary>
            <remarks>
            <p class="body">
            By default, when text is matched by a terminal symbol, that
            text is removed from the input and a token is generated for
            it in the resulting
            <see cref="T:Infragistics.SyntaxParsing.ParseTree">ParseTree</see>.
            In cases where it is desirable to enforce the presence
            of the text represented by the terminal symbol, but prevent
            the resulting token from appearing in the ParseTree, this
            property can be set to false.
            </p>
            </remarks> 
        </member>
        <member name="P:Infragistics.SyntaxParsing.TerminalSymbol.IsBoundary">
            <summary>
            Returns or sets a value which determines whether this terminal symbol's
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.Value">Value</see>
            can be considered to be a parsing boundary for other TerminalSymbols.
            </summary>
            <remarks>
            <p class="body">
            This property is only used when the associated
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar's</see>
            <see cref="P:Infragistics.SyntaxParsing.Grammar.TerminalBoundary">TerminalBoundary</see>
            is not explicitly set.
            </p>
            <p class="body">
            When the associated Grammar's default parse boundary checking mechanism is initialized,
            terminal symbols whose IsBoundary property returns true are included, so that
            such symbols can act as a parsing boundary for other terminal symbols.
            </p>
            <p class="body">
            Terminal boundaries are not checked for TerminalSymbols whose IsBoundary
            property returns true, unless the symbol has a boundary explicitly defined.
            </p>
            <p class="body">
            By default, terminal symbols which meet the following criteria are used
            when a terminal boundary is evaluated:
            <ul>
                <li>
                The
                <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.Comparison">Comparison</see>
                property returns either 'Literal' or 'LiteralIgnoreCase'.
                </li>
                <li>
                The
                <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.Value">Value</see>
                property contains only one character.
                </li>
                <li>
                The string returned from the Value property is neither a letter nor a digit.
                </li>
            </ul>
            </p>
            </remarks>
            <seealso cref="P:Infragistics.SyntaxParsing.Grammar.TerminalBoundary">TerminalBoundary property (Grammar class)</seealso>
        </member>
        <member name="T:Infragistics.SyntaxParsing.TokenBase">
            <summary>
            Encapsulates the properties of a parsed token.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TokenBase.GetLineNumber(System.Int32,System.Int32@)">
            <summary>
            Returns the one-based line number and column position of the specified character.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TokenBase.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TokenBase.CharacterPosition">
            <summary>
            Returns the zero-based character position, relative to the
            first character of the text being parsed, at which this token appears.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TokenBase.Text">
            <summary>
            Returns the string value that was matched to produce this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TokenBase.Length">
            <summary>
            Returns the length of the string returned from the
            <see cref="P:Infragistics.SyntaxParsing.TokenBase.Text">Text</see>
            property.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TokenBase.LineNumber">
            <summary>
            Returns the one-based line number at which this token appears,
            as relative to the first character in the input text.
            </summary>
            <remarks>
            <p class="body">
            Line number are determined by counting the number of newlines that precede
            the token, with the newline character(s) being defined by the value of the grammar's
            <see cref="P:Infragistics.SyntaxParsing.Grammar.NewLine">NewLine</see>
            property.
            </p>
            </remarks> 
        </member>
        <member name="P:Infragistics.SyntaxParsing.TokenBase.Column">
            <summary>
            Returns the one-based column number at which this roken appears,
            as relative to the first character of the line containing the token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TokenBase.IsWhitespace">
            <summary>
            Returns a boolean value indicating whether this token
            represents a sequence of one or more whitespace characters.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.ParseTreeTokenBase">
            <summary>
            Base class for Token and ErrorToken classes.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.ParseTreeTokenBase.parseTree">
            <summary>parseTree</summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.ParseTreeTokenBase.GetLineNumber(System.Int32,System.Int32@)">
            <summary>
            Returns the one-based line number and column position of the specified character.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.ParseTreeTokenBase.TerminalSymbol">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            associated with this token, or null if the token is not associated
            with a terminal symbol.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.ParseTreeTokenBase.ParentRule">
            <summary>
            Returns the parent
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRule">rule</see>
            of the
            <see cref="P:Infragistics.SyntaxParsing.ParseTreeTokenBase.TerminalSymbol">TerminalSymbol</see>
            associated with this token.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Token">
            <summary>
            Encapsulates a tokenized string value resulting from a
            successful parse operation.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.ErrorToken">
            <summary>
            Encapsulates an unsuccessful terminal parse attempt.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.IErrorToken">
            <summary>
            Implemented by tokens which represent a parse error.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.IErrorToken.CharacterPosition">
            <summary>
            Returns the zero-based character position, relative to the
            first character of the text being parsed, at which this token appears.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.IErrorToken.Text">
            <summary>
            Returns the string value that was matched to produce this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.IErrorToken.Description">
            <summary>
            Returns a human-readable message describing the error.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.IErrorToken.LineNumber">
            <summary>
            Returns the one-based line number at which this token appears,
            as relative to the first character in the input text.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.IErrorToken.Column">
            <summary>
            Returns the one-based column number at which this roken appears,
            as relative to the first character of the line containing the token.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.ErrorToken.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.ErrorToken.Reason">
            <summary>
            Returns a value which describes the reason for the error
            which produced this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.ErrorToken.Description">
            <summary>
            Returns a human-readable message describing this error.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.WhitespaceToken">
            <summary>
            Encapsulates a tokenized string value resulting from the
            parsing of insignificant whitespace.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.WhitespaceToken.ParentRule">
            <summary>
            Always returns a
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalRule">NonTerminalRule</see>
            based on the
            <see cref="P:Infragistics.SyntaxParsing.Grammar.StartSymbol">StartSymbol</see>
            of the associated grammar.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.WhitespaceToken.TerminalSymbol">
            <summary>
            Always returns a reference to the
            <see cref="P:Infragistics.SyntaxParsing.Grammar.WhitespaceRegexSymbol">WhitespaceRegexSymbol</see>
            of the assocuated grammar.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.WhitespaceToken.IsWhitespace">
            <summary>
            Returns true for this class.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Importing.ImportErrorReason">
            <summary>
            Constants which describe the reason for an import error.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.ImportErrorReason.None">
            <summary>
            Used for variable initialization.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.ImportErrorReason.EmptyGrammarDefinition">
            <summary>
            The grammar definition being imported was empty.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.ImportErrorReason.MissingDeclaration">
            <summary>
            The left-hand side of a production rule statement did
            not contain a value that could be parsed into a valid
            identifier.
            All production rule statements must begin with a valid identifier which is not
            enclosed in quotes; this value may represent the name of a NonTerminalSymbol, or
            a unique identifier which references a TerminalSymbol.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.ImportErrorReason.DuplicateIdentifier">
            <summary>
            The left-hand side of a production rule statement or terminal symbol declaration
            contained an identifier which had already been used to declare a
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            or
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.ImportErrorReason.UnrecognizedContent">
            <summary>
            The right-hand side of a production rule statement contained content
            which was unrecognizable with the current grammar notation definition,
            and no specific reason could be determined.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.ImportErrorReason.CircularNonTerminalReference">
            <summary>
            The right-hand side of a production rule statement contained a reference to a
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>
            which is declared by that same statement, causing a circular reference.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.ImportErrorReason.MissingAssignmentSymbol">
            <summary>
            The production rule statement did not contain an
            <see cref="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.AssignmentSymbol">AssignmentSymbol</see>
            (typically an equals sign) following the 
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>
            declaration.
            All production rule statements must contain one and only one assignment symbol,
            following the NonTerminalSymbol declaration.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.ImportErrorReason.MissingEndOfStatement">
            <summary>
            The production rule statement did not contain an
            <see cref="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.EndOfStatementSymbol">EndOfStatementSymbol</see>
            (typically a semicolon) anywhere in the script.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.ImportErrorReason.ExtraAssignmentSymbol">
            <summary>
            The production rule statement contained more than one occurrence of the
            <see cref="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.AssignmentSymbol">AssignmentSymbol</see>.
            All production rule statements must contain one and only one assignment symbol,
            following the NonTerminalSymbol declaration.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.ImportErrorReason.MissingOperator">
            <summary>
            An operator was expected at the specified location. This is usually caused
            by the occurrence of two adjacent operands.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.ImportErrorReason.MissingOperand">
            <summary>
            An operand was expected at the specified location. This is usually caused
            by the occurrence of two adjacent operators.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.ImportErrorReason.GroupingSymbolMismatch">
            <summary>
            An opening grouping symbol, such as a
            <see cref="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.GroupingBlockOpeningSymbol">GroupingBlockOpeningSymbol</see>,
            was encountered, but no matching closing symbol was found.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.ImportErrorReason.InvalidTerminalDeclaration">
            <summary>
            A statement that was prefixed with the special terminal
            symbol declaration identifier could not be parsed into
            a valid statement.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.ImportErrorReason.InvalidAssignment">
            <summary>
            Content that was parsed from the left-hand side of a statement
            was not valid for assignment.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.ImportErrorReason.UndeclaredReference">
            <summary>
            A reference to an identifier that was never declared was encountered.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.ImportErrorReason.InvalidDeclaration">
            <summary>
            More than one identifier was encountered on the left-hand side of a statement.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.ImportErrorReason.InvalidRegularExpression">
            <summary>
            A terminal symbol was designated as a regular expression pattern,
            but the pattern specified was not valid.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.ImportErrorReason.InvalidConjunctionRuleDescendant">
            <summary>
            A
            <see cref="T:Infragistics.SyntaxParsing.ConjunctionRule">ConjunctionRule</see>
            or
            <see cref="T:Infragistics.SyntaxParsing.NegationRule">NegationRule</see>
            had one or more invalid descendant rules.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.ImportErrorReason.NegationRuleIsFirstDescendant">
            <summary>
            A
            <see cref="T:Infragistics.SyntaxParsing.NegationRule">NegationRule</see>
            appeared as the first sub-rule.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.ImportErrorReason.StartSymbolIsReferenced">
            <summary>
            A
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>
            was designated as the
            <see cref="P:Infragistics.SyntaxParsing.Grammar.StartSymbol">StartSymbol</see>
            for the grammar, but that NonTerminalSymbol is referenced by at least one other
            NonTerminalSymbol.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.ImportErrorReason.DuplicateStartSymbol">
            <summary>
            More than one
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>
            has been designated as the 
            <see cref="P:Infragistics.SyntaxParsing.Grammar.StartSymbol">StartSymbol</see>
            for the associated grammar.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Importing.SpecialSequenceType">
            <summary>
            Constants which identify the types of a
            <see cref="T:Infragistics.SyntaxParsing.Importing.SpecialSequence">SpecialSequence</see>
            token.
            </summary>
            <remarks>
            <p class="body">
            When content is encountered in the script which is enclosed within a pair of
            <see cref="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.SpecialSequenceSymbol">special sequence symbols</see>,
            a
            <see cref="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.SpecialSequenceSymbol">SpecialSequenceSymbol</see>
            instance is created and added to the
            <see cref="P:Infragistics.SyntaxParsing.Importing.GrammarImporter.SpecialSequences">SpecialSequences</see>
            collection.
            </p>
            </remarks> 
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.SpecialSequenceType.Unknown">
            <summary>
            Not recognized by the associated
            <see cref="T:Infragistics.SyntaxParsing.Importing.GrammarImporter">GrammarImporter</see>.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.SpecialSequenceType.TerminalSymbolLiteralIgnoreCase">
            <summary>
            A special sequence which contained the value of the
            <see cref="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.IgnoreCaseIdentifier">IgnoreCaseIdentifier</see>
            property.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.SpecialSequenceType.TerminalSymbolRegex">
            <summary>
            A special sequence which contained the value of the
            <see cref="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.RegexIdentifier">RegexIdentifier</see>
            property.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.SpecialSequenceType.StartSymbol">
            <summary>
            A special sequence which contained the value of the
            <see cref="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.StartSymbolIdentifier">StartSymbolIdentifier</see>
            property.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.SpecialSequenceType.GrammarName">
            <summary>
            A special sequence which contained the value of the
            <see cref="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.GrammarNameIdentifier">GrammarNameIdentifier</see>
            property.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.SpecialSequenceType.TerminalSymbolDeclaration">
            <summary>
            A special sequence which contained the value of the
            <see cref="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.TerminalSymbolDeclarationIdentifier">TerminalSymbolDeclarationIdentifier</see>
            property.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Importing.StatementTokenType">
            <summary>
            Constants which identify the different types of statement tokens.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.StatementTokenType.None">
            <summary>
            Used for variable initialization.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.StatementTokenType.TerminalSymbol">
            <summary>
            <see cref="T:Infragistics.SyntaxParsing.Importing.TerminalSymbolToken">TerminalSymbolToken</see>
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.StatementTokenType.NonTerminalSymbol">
            <summary>
            <see cref="T:Infragistics.SyntaxParsing.Importing.NonTerminalSymbolToken">NonTerminalSymbolToken</see>
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.StatementTokenType.CommentBlock">
            <summary>
            <see cref="T:Infragistics.SyntaxParsing.Importing.CommentBlock">CommentBlock</see>
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.StatementTokenType.SpecialSequence">
            <summary>
            <see cref="T:Infragistics.SyntaxParsing.Importing.SpecialSequence">SpecialSequence</see>
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.StatementTokenType.NonTerminalSymbolDeclaration">
            <summary>
            <see cref="T:Infragistics.SyntaxParsing.Importing.NonTerminalSymbolDeclaration">NonTerminalSymbolDeclaration</see>
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.StatementTokenType.TerminalSymbolDeclaration">
            <summary>
            <see cref="T:Infragistics.SyntaxParsing.Importing.TerminalSymbolDeclaration">TerminalSymbolDeclaration</see>
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.StatementTokenType.AlternationOperator">
            <summary>
            <see cref="T:Infragistics.SyntaxParsing.Importing.AlternationOperator">AlternationOperator</see>
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.StatementTokenType.ConcatenationOperator">
            <summary>
            <see cref="T:Infragistics.SyntaxParsing.Importing.ConcatenationOperator">ConcatenationOperator</see>
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.StatementTokenType.ConjunctionOperator">
            <summary>
            <see cref="T:Infragistics.SyntaxParsing.Importing.ConjunctionOperator">ConjunctionOperator</see>
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.StatementTokenType.NegationOperator">
            <summary>
            <see cref="T:Infragistics.SyntaxParsing.Importing.NegationOperator">NegationOperator</see>
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.StatementTokenType.SyntacticFactor">
            <summary>
            <see cref="T:Infragistics.SyntaxParsing.Importing.SyntacticFactor">SyntacticFactor</see>
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.StatementTokenType.Group">
            <summary>
            <see cref="T:Infragistics.SyntaxParsing.Importing.OperationGroup">OperationGroup</see>
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.StatementTokenType.OptionalGroup">
            <summary>
            <see cref="T:Infragistics.SyntaxParsing.Importing.OptionalGroup">OptionalGroup</see>
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.StatementTokenType.RepetitionGroup">
            <summary>
            <see cref="T:Infragistics.SyntaxParsing.Importing.RepetitionGroup">RepetitionGroup</see>
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.StatementTokenType.AlternationGroup">
            <summary>
            <see cref="T:Infragistics.SyntaxParsing.Importing.AlternationGroup">AlternationGroup</see>
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.StatementTokenType.ConcatenationGroup">
            <summary>
            <see cref="T:Infragistics.SyntaxParsing.Importing.ConcatenationGroup">ConcatenationGroup</see>
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.StatementTokenType.ConjunctionGroup">
            <summary>
            <see cref="T:Infragistics.SyntaxParsing.Importing.ConjunctionGroup">ConjunctionGroup</see>
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.StatementTokenType.NegationGroup">
            <summary>
            <see cref="T:Infragistics.SyntaxParsing.Importing.NegationGroup">NegationGroup</see>
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.StatementTokenType.Assignment">
            <summary>
            <see cref="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.AssignmentSymbol">AssignmentSymbol</see>
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.StatementTokenType.EndOfStatement">
            <summary>
            <see cref="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.EndOfStatementSymbol">EndOfStatementSymbol</see>
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.StatementTokenType.Whitespace">
            <summary>
            Represents a continuous run of whitespace characters.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.StatementTokenType.LiteralString">
            <summary>
            Represents a literal string.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.StatementTokenType.BlockSymbol">
            <summary>
            Represents an opening or closing symbol for an operation group.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Importing.GrammarImporter">
            <summary>
            Initializes a
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            instance from a grammar definition script .
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.GrammarImporter.pattern_EverythingInQuotes">
            <summary>
            {0} = quote symbol
            Uses negative lookbehind so as to not count escaped quotes.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.GrammarImporter.pattern_NotInQuotes">
            <summary>
            {0} = quote symbol
            {1} = character to check
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.GrammarImporter.pattern_Grouping">
            <summary>
            {0} = open symbol, {1} = close symbol
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.GrammarImporter.pattern_SpecialSequence">
            <summary>
            {0} = special sequence symbol
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.GrammarImporter.pattern_CommentBlock">
            <summary>
            {0} = comment block open symbol, {1} = comment block close symbol
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.GrammarImporter.pattern_RepetitionOperator">
            <summary>
            {0} = repetition operator symbol
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.GrammarImporter.pattern_Integer">
            <summary>
            No params
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.GrammarImporter.pattern_Identifier">
            <summary>
            No params
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.GrammarImporter.IdentifierRegexPattern">
            <summary>
            Returns the regular expression pattern used to match strings which
            represent terminal and non-terminal symbol identifiers in a grammar
            definition (^[a-zA-Z_@\p{L}][a-zA-Z0-9_@\p{L}]*).
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Importing.GrammarImporter.#ctor">
            <summary>
            Creates a new instance of this class which reads Extended Backus-Naur Form (EBNF) notation.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Importing.GrammarImporter.#ctor(Infragistics.SyntaxParsing.Importing.GrammarNotation)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param key="notationDefinition">
            A
            <see cref="T:Infragistics.SyntaxParsing.Importing.GrammarNotation">GrammarNotation</see>-derived
            instance which defines the notation properties of the script to be imported.
            </param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Importing.GrammarImporter.Load(System.String)">
            <summary>
            Initializes this instance from the specified input.
            </summary>
            <param key="input">
            The content to be loaded.
            </param>
            <returns>
            An
            <see cref="T:Infragistics.SyntaxParsing.Importing.ImportResult">ImportResult</see>
            instance which describes the result of the import operation.
            </returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Importing.GrammarImporter.LoadFromFile(System.String)">
            <summary>
            Initializes this instance from the specified file.
            </summary>
            <param key="filename">
            The full path to the file to be loaded.
            </param>
            <returns>
            An
            <see cref="T:Infragistics.SyntaxParsing.Importing.ImportResult">ImportResult</see>
            instance which describes the result of the import operation.
            </returns>
            <remarks>
            <p class="body">
            This overload uses little-endian UTF-16 encoding (System.Text.Encoding.Unicode).
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Importing.GrammarImporter.LoadFromFile(System.String,System.Text.Encoding)">
            <summary>
            Initializes this instance from the specified file.
            </summary>
            <param key="filename">
            The full path to the file to be loaded.
            </param>
            <param key="encoding">
            The character encoding.
            </param>
            <returns>
            An
            <see cref="T:Infragistics.SyntaxParsing.Importing.ImportResult">ImportResult</see>
            instance which describes the result of the import operation.
            </returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Importing.GrammarImporter.TokenFromRule(Infragistics.SyntaxParsing.SyntaxRuleBase)">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.Importing.StatementToken">token</see>
            associated with the specified
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleBase">syntax rule</see>.
            </summary>
            <param key="rule">
            The
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleBase">syntax rule</see>
            whose associated
            <see cref="T:Infragistics.SyntaxParsing.Importing.StatementToken">token</see>
            is to be returned.
            </param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Importing.GrammarImporter.FindSymbolDeclaration(Infragistics.SyntaxParsing.Symbol)">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.Importing.SymbolToken">SymbolToken</see>
            which represents the declaration of the specified
            <see cref="T:Infragistics.SyntaxParsing.Symbol">symbol</see>,
            or null if no token exists for the symbol.
            </summary>
            <param name="symbol">
            The
            <see cref="T:Infragistics.SyntaxParsing.Symbol">symbol</see>
            for which the token is to be returned.
            </param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Importing.GrammarImporter.FindToken(System.Int32)">
            <summary>
            Returns the token closest to the specified character position.
            </summary>
            <param name="characterPosition">
            The zero-based character position.
            </param>
            <returns>
            A
            <see cref="T:Infragistics.SyntaxParsing.Importing.StatementToken">StatementToken</see>
            or null.
            </returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Importing.GrammarImporter.FindToken(System.Int32,Infragistics.SyntaxParsing.Symbol@)">
            <summary>
            Returns the token closest to the specified character position.
            </summary>
            <param name="characterPosition">
            The zero-based character position.
            </param>
            <param name="symbol">
            [out] Upon return, contains a reference to the
            <see cref="T:Infragistics.SyntaxParsing.Symbol">Symbol</see>
            whose declaration statement contained the returned token,
            or null if not applicable.
            </param>
            <returns>
            A
            <see cref="T:Infragistics.SyntaxParsing.Importing.StatementToken">StatementToken</see>
            or null.
            </returns>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.GrammarImporter.Comments">
            <summary>
            Returns an enumerator containing the
            <see cref="T:Infragistics.SyntaxParsing.Importing.CommentBlock">CommentBlock</see>
            instances which comprise the comments found within the associated script.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.GrammarImporter.SpecialSequences">
            <summary>
            Returns an enumerator containing the
            <see cref="T:Infragistics.SyntaxParsing.Importing.SpecialSequence">SpecialSequence</see>
            instances which comprise the special sequences found within the associated script.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.GrammarImporter.Notation">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.Importing.GrammarNotation">GrammarNotation</see>
            instance which defines the token strings for this
            <see cref="T:Infragistics.SyntaxParsing.Importing.GrammarImporter">GrammarImporter</see>
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.GrammarImporter.Grammar">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            instance resulting from this import operation.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.GrammarImporter.NewLine">
            <summary>
            Returns or sets the character string which is used to represent
            new lines.
            </summary>
            <remarks>
            <p class="body">
            In the case where the NewLine property is not explicitly set, the
            input string is searched for the presence of typical newline character
            sequences, i.e., '\r\n' and '\n'. Upon detection of the first newline,
            the value is cached and assumed to be the line delimiting character. This
            behavior can be overriden by explicitly setting the NewLine property.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.GrammarImporter.Tokens">
            <summary>
            Returns an enumerator containing the
            <see cref="T:Infragistics.SyntaxParsing.Importing.StatementToken">StatementToken</see>
            instances which comprise the set of all strings found within the associated script.
            </summary>
            <remarks>
            <p class="body">
            This enumerator contains tokens for all parsed strings, appearing in
            the same order in which they appear in the string passed to the
            <see cref="M:Infragistics.SyntaxParsing.Importing.GrammarImporter.Load(System.String)">Load</see>
            method. It can be used to format the script.
            </p>
            </remarks>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Importing.GrammarNotation">
            <summary>
            Encapsulates the properties of the notation used to represent a
            <see cref="T:Infragistics.SyntaxParsing.Grammar">grammar</see>
            definition.
            </summary>
            <remarks>
            <p class="body">
            A grammar notation definition is used to define the string values
            which identify reserved symbols within the grammar, for example,
            the assignment operator or end-of-statement marker.
            </p>
            <p class="body">
            By default, the
            <see cref="T:Infragistics.SyntaxParsing.Importing.GrammarImporter">GrammarImporter</see>
            class expects input that conforms to the Extended Backup-Naur Form definition,
            as standardized in 1996 by the ISO/IEC 14977 specification (visit the
            <a href="http://www.iso.org">Internation Organization for Standardization</a>
            website for details).
            </p>
            <p class="body">
            In cases where the developer wants to use different symbols to denote assignments,
            logical operators, special sequences, comments, end-of-statement markers, etc., a
            class can be derived from this one, and the applicable properties overridden. That
            instance is then passed to the GrammarImporter class constructor when creating the object.
            </p>
            <p class="body">
            Note that all property values for the derived class must be unique, as ambiguity
            in this regard makes it impossible to reliably parse script content.
            </p>
            </remarks>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.GrammarNotation.DefaultQuoteSymbol">
            <summary>Double-quote (")</summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.GrammarNotation.DefaultAssignmentSymbol">
            <summary>Equals sign (=)</summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.GrammarNotation.DefaultEndOfStatementSymbol">
            <summary>Semicolon (;)</summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.GrammarNotation.DefaultAlternationOperatorSymbol">
            <summary>Pipe (|)</summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.GrammarNotation.DefaultConcatenationOperatorSymbol">
            <summary>Comma (,)</summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.GrammarNotation.DefaultConjunctionOperatorSymbol">
            <summary>Ampersand</summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.GrammarNotation.DefaultNegationOperatorSymbol">
            <summary>Minus sign (-)</summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.GrammarNotation.DefaultRepetitionOperatorSymbol">
            <summary>Asterisk (*)</summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.GrammarNotation.DefaultRepetitionBlockOpeningSymbol">
            <summary>Open curly brace ({)</summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.GrammarNotation.DefaultRepetitionBlockClosingSymbol">
            <summary>Close curly brace (})</summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.GrammarNotation.DefaultOptionalBlockOpeningSymbol">
            <summary>Opene square bracket ([)</summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.GrammarNotation.DefaultOptionalBlockClosingSymbol">
            <summary>Close square bracket (])</summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.GrammarNotation.DefaultGroupingBlockOpeningSymbol">
            <summary>Open parenthesis</summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.GrammarNotation.DefaultGroupingBlockClosingSymbol">
            <summary>Close parenthesis</summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.GrammarNotation.DefaultCommentBlockOpeningSymbol">
            <summary>Open parenthesis followed by asterisk '(*'</summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.GrammarNotation.DefaultCommentBlockClosingSymbol">
            <summary>Asterisk followed by close parenthesis '(*'</summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.GrammarNotation.DefaultSpecialSequenceSymbol">
            <summary>Question mark (?)</summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.GrammarNotation.DefaultRegexIdentifier">
            <summary>
            When found between two occurrences of the
            <see cref="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.SpecialSequenceSymbol">SpecialSequenceSymbol</see>,
            this token identifies a literal string in a grammar definition script
            as a regular expression pattern.
            </summary>
            <remarks>
            <p class="body">
            Example:
            A literal string found within a grammar definition script with the
            value ?REGEX?"[a-zA-Z0-9]" causes the resulting
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            to be created with a value of 'RegularExpression' for its
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.Comparison">Comparison</see>
            property.
            </p>
            </remarks>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.GrammarNotation.DefaultStartSymbolIdentifier">
            <summary>
            When found between two occurrences of the
            <see cref="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.SpecialSequenceSymbol">SpecialSequenceSymbol</see>,
            this token identifies a non-terminal symbol as the start symbol for the associated grammar.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.GrammarNotation.DefaultIgnoreCaseIdentifier">
            <summary>
            When found between two occurrences of the
            <see cref="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.SpecialSequenceSymbol">SpecialSequenceSymbol</see>,
            this token signifies that the TerminalSymbol that will be created for the value is to be
            created with a value of 'LiteralIgnoreCase' for its
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.Comparison">Comparison</see>
            property.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.GrammarNotation.DefaultTerminalSymbolDeclarationIdentifier">
            <summary>
            When found between two occurrences of the
            <see cref="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.SpecialSequenceSymbol">SpecialSequenceSymbol</see>,
            this token signifies that the following statement is to be interpreted as a
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>,
            declaration.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Importing.GrammarNotation.DefaultGrammarNameIdentifier">
            <summary>
            When found between two occurrences of the
            <see cref="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.SpecialSequenceSymbol">SpecialSequenceSymbol</see>,
            this token identifies a literal string in a grammar definition script
            as a value to be assigned to the
            <see cref="P:Infragistics.SyntaxParsing.Grammar.Name">Name</see>
            property of the resulting grammar.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.QuoteSymbol">
            <summary>Returns the symbol which is used to enclose literal strings.</summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.AssignmentSymbol">
            <summary>Returns the symbol which is used to represent assignment of a right-hand expression to a non-terminal.</summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.EndOfStatementSymbol">
            <summary>Returns the symbol which is used to represent the end of a production rule statement.</summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.AlternationOperatorSymbol">
            <summary>Returns the symbol which is used to represent the alternation (logical 'OR') operator.</summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.ConcatenationOperatorSymbol">
            <summary>Returns the symbol which is used to represent the concatenation operator.</summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.ConjunctionOperatorSymbol">
            <summary>Returns the symbol which is used to represent the conjunction (logical 'AND') operator.</summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.NegationOperatorSymbol">
            <summary>Returns the symbol which is used to represent the negation (logical 'NAND') operator.</summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.RepetitionOperatorSymbol">
            <summary>Returns the symbol which is used to represent the shorthand repetition operator.</summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.RepetitionBlockOpeningSymbol">
            <summary>Returns the symbol which is used to represent the beginning of a repetition block.</summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.RepetitionBlockClosingSymbol">
            <summary>Returns the symbol which is used to represent the end of a repetition block.</summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.OptionalBlockOpeningSymbol">
            <summary>Returns the symbol which is used to represent the beginning of an optional block.</summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.OptionalBlockClosingSymbol">
            <summary>Returns the symbol which is used to represent the end of an optional block.</summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.GroupingBlockOpeningSymbol">
            <summary>Returns the symbol which is used to represent the beginning of a grouping block.</summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.GroupingBlockClosingSymbol">
            <summary>Returns the symbol which is used to represent the end of a grouping block.</summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.CommentBlockOpeningSymbol">
            <summary>Returns the symbol which is used to represent the beginning of a comment block.</summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.CommentBlockClosingSymbol">
            <summary>Returns the symbol which is used to represent the end of a comment block.</summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.SpecialSequenceSymbol">
            <summary>Returns the symbol which is used to represent the beginning and end of a special sequence block.</summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.RegexIdentifier">
            <summary>Returns the token which is used to identify a literal string as a regular expression pattern.</summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.IgnoreCaseIdentifier">
            <summary>Returns the token which is used to signify that a literal string is to be evaluated without regard to case.</summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.StartSymbolIdentifier">
            <summary>Returns the token which is used to signify that a non-terminal symbol is the start symbol for the associated grammar.</summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.GrammarNameIdentifier">
            <summary>
            Returns the token which is used to specify a
            <see cref="P:Infragistics.SyntaxParsing.Grammar.Name">name</see>
            for the associated grammar.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.TerminalSymbolDeclarationIdentifier">
            <summary>
            Returns the token which is used to signify that the following statement is to be interpreted as a
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            declaration.
            </summary>
            <remarks>
            <p class="body">
            When a literal string is detected within the grammar script, it is implied to
            refer to a TerminalSymbol; the first occurrence of the literal string triggers
            creation of a TerminalSymbol instance, and subsequent occurrences refer to that
            instance. 
            </p>
            <p class="body">
            No mechanism exists in the EBNF specification by which a token can be declared
            to identify a literal string so that it can be referred to elsewhere in the script.
            The TerminalSymbolDeclarationIdentifier property makes it possible to mark an
            assignment statement in the script as a terminal symbol declaration, so that a
            mnemonic can be used to reference a literal string anywhere in the script.
            This mnemonic is interpreted by subsequent statements as a reference to the
            TerminalSymbol whose value is the literal string that was assigned to the mnemonic
            in the declaration statement
            </p>
            <p class="body">
            The following statement is an example of a terminal symbol declaration:
            <br></br>
            ?TERMINAL_SYMBOL? AnyNumber = ?REGEX? "[0-9]+";
            <br></br>
            </p>
            <p class="body">
            As seen in the example, a terminal declaration statement must be in the form
            <br></br>
            [Special sequence symbol] [Terminal symbol declaration identifier] [Special sequence symbol] [Identifier] [Assignment operator] [Literal string] [End of statement symbol]
            <br></br>
            Also note that the [Literal string] portion can be optionally preceded by a special sequence.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.EBNFDefinition">
            <summary>
            Returns an
            <see cref="T:Infragistics.SyntaxParsing.Importing.EBNFGrammarNotationDefinition">EBNFGrammarNotationDefinition</see>
            instance.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Importing.EBNFGrammarNotationDefinition">
            <summary>
            Returns a
            <see cref="T:Infragistics.SyntaxParsing.Importing.GrammarNotation">GrammarNotation</see>
            with all properties set to values which comply with ISO standard 14977 for Extended Backus-Naur Form.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.EBNFGrammarNotationDefinition.Instance">
            <summary>
            Returns a singleton instance of this class.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Importing.GrammarStatement">
            <summary>
            Encapsulates a production rule statement as parsed from
            a grammar definition script.
            </summary>
            <remarks>
            <p class="body">
            When a grammar definition script is parsed, each occurrence of the
            <see cref="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.EndOfStatementSymbol">EndOfStatementSymbol</see>
            marks the end of a grammar statement; a GrammarStatement instance is created for the content preceding that marker.
            </p>
            <p class="body">
            The resulting GrammarStatement is then tokenized, using the symbols as defined by the associated
            <see cref="T:Infragistics.SyntaxParsing.Importing.GrammarNotation">GrammarNotation</see>.
            Each successfully parsed token appears as a member of the
            <see cref="P:Infragistics.SyntaxParsing.Importing.GrammarStatement.Tokens">Tokens</see>
            collection.
            </p>
            </remarks> 
        </member>
        <member name="M:Infragistics.SyntaxParsing.Importing.GrammarStatement.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.GrammarStatement.Text">
            <summary>
            Returns the string value which was parsed from the script to create
            this statement.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.GrammarStatement.CharacterPosition">
            <summary>
            Returns the position of the first character of this statement,
            as relative to the first character in the associated script.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.GrammarStatement.TokenList">
            <summary>
            Returns a list of the tokens which comprise this statement.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.GrammarStatement.Tokens">
            <summary>
            Returns an enumerator containing the
            <see cref="T:Infragistics.SyntaxParsing.Importing.StatementToken">StatementToken</see>
            instances of which this statement is comprised.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Importing.NonTerminalSymbolDeclarationStatement">
            <summary>
            Encapsulates a grammar statement which contains the declaration of a
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.NonTerminalSymbolDeclarationStatement.NonTerminalSymbolDeclaration">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.Importing.NonTerminalSymbolDeclaration">NonTerminalSymbolDeclaration</see>
            associated with this statement.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.NonTerminalSymbolDeclarationStatement.NonTerminalSymbol">
            <summary>
            Returs a reference to the associated
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Importing.TerminalSymbolDeclarationStatement">
            <summary>
            Encapsulates a grammar statement which contains the declaration of an
            identifier which references a
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.TerminalSymbolDeclarationStatement.TerminalSymbolDeclaration">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.Importing.TerminalSymbolDeclaration">TerminalSymbolDeclaration</see>
            associated with this statement.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Importing.GrammarPropertyStatement">
            <summary>
            Encapsulates a grammar statement which contains the declaration of an
            identifier which references a
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Importing.ImportError">
            <summary>
            Encapsulates an error that was encountered while attempting to
            import a grammar definition script.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Importing.ImportError.GetLineNumber(System.Int32,System.Int32@)">
            <summary>
            Returns the one-based line number and column position of the specified character.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Importing.ImportError.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.ImportError.Reason">
            <summary>
            Returns a constant which identifies the reason for the error.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.ImportError.Description">
            <summary>
            Returns the human-readable description of the error.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Importing.ImportResult">
            <summary>
            Describes the result of a grammar definition import operation.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Importing.ImportResult.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.ImportResult.Success">
            <summary>
            Returns a boolean value indicating whether the import
            operation was successful.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.ImportResult.Errors">
            <summary>
            Returns a read-only collection containing an
            <see cref="T:Infragistics.SyntaxParsing.Importing.ImportError">ImportError</see>
            instance for each error that occurred during the import operation.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Importing.StatementToken">
            <summary>
            Base class for objects which represent the tokens which comprise a
            production rule
            <see cref="T:Infragistics.SyntaxParsing.Importing.NonTerminalSymbolDeclarationStatement">NonTerminalSymbolDeclarationStatement</see>.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Importing.StatementToken.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Importing.StatementToken.GetLineNumber(System.Int32,System.Int32@)">
            <summary>
            Returns the one-based line number and column position of the specified character.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.StatementToken.TokenType">
            <summary>
            When overridden in a derivеd class, returns a value which
            identifies the type of the token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.StatementToken.HasTokens">
            <summary>
            When overridden in a derived class, returns a boolean value
            indicating whether this token has child tokens.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Importing.OperatorToken">
            <summary>
            Base class for tokens which represent logical operators.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.OperatorToken.TokenType">
            <summary>
            Not supported
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Importing.AlternationOperator">
            <summary>
            Represents the alternation operator (typically a '|' character).
            </summary>
            <seealso cref="T:Infragistics.SyntaxParsing.AlternationRule">AlternationRule</seealso>
            <seealso cref="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.AlternationOperatorSymbol">AlternationOperatorSymbol</seealso>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.AlternationOperator.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Importing.ConcatenationOperator">
            <summary>
            Represents the concatenation operator (typically a ',' character).
            </summary>
            <seealso cref="T:Infragistics.SyntaxParsing.ConcatenationRule">ConcatentationRule</seealso>
            <seealso cref="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.ConcatenationOperatorSymbol">ConcatenationOperatorSymbol</seealso>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.ConcatenationOperator.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Importing.ConjunctionOperator">
            <summary>
            Represents the concatenation operator (typically an ampersand).
            </summary>
            <seealso cref="T:Infragistics.SyntaxParsing.ConjunctionRule">ConjunctionRule</seealso>
            <seealso cref="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.ConjunctionOperatorSymbol">ConjunctionOperatorSymbol</seealso>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.ConjunctionOperator.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Importing.NegationOperator">
            <summary>
            Represents the concatenation operator (typically a '-' character).
            </summary>
            <seealso cref="T:Infragistics.SyntaxParsing.NegationRule">NegationRule</seealso>
            <seealso cref="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.NegationOperatorSymbol">NegationOperatorSymbol</seealso>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.NegationOperator.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Importing.SyntacticFactor">
            <summary>
            Represents the repetition operator (typically a '*' character).
            </summary>
            <remarks>
            <p class="body">
            When prefixed with an integer value, the
            <see cref="P:Infragistics.SyntaxParsing.Importing.SyntacticFactor.Factor">Factor</see>
            is assigned that integer value. When no integer value precedes the repetition operator,
            the Minimum property resolves to 1, and the Maximum property resolves to null, resulting
            in "one or more" repetitions.
            </p>
            </remarks> 
            <seealso cref="T:Infragistics.SyntaxParsing.RepetitionRule">RepetitionRule</seealso>
            <seealso cref="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.RepetitionOperatorSymbol">RepetitionOperatorSymbol</seealso>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.SyntacticFactor.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.SyntacticFactor.Factor">
            <summary>
            Returns the repetition factor.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Importing.NonTerminalSymbolToken">
            <summary>
            Represents a reference to a
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>.
            </summary>
            <seealso cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</seealso>
            <seealso cref="T:Infragistics.SyntaxParsing.NonTerminalRule">NonTerminalRule</seealso>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Importing.SymbolToken">
            <summary>
            Base class for tokens which represent terminal and non-terminal symbols.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Importing.SymbolToken.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.SymbolToken.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.SymbolToken.Symbol">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.Symbol">Symbol</see>
            associated with this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.NonTerminalSymbolToken.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.NonTerminalSymbolToken.NonTerminalSymbol">
            <summary>
            Returns a reference to the associated
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Importing.TerminalSymbolToken">
            <summary>
            Represents a reference to a
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>.
            </summary>
            <seealso cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</seealso>
            <seealso cref="T:Infragistics.SyntaxParsing.TerminalRule">TerminalRule</seealso>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.TerminalSymbolToken.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.TerminalSymbolToken.TerminalSymbol">
            <summary>
            Returns a reference to the associated
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.TerminalSymbolToken.FromReference">
            <summary>
            Returns a boolean value indicating whether this token was created
            by parsing a reference to a
            <see cref="T:Infragistics.SyntaxParsing.Importing.TerminalSymbolDeclaration">TerminalSymbolDeclaration</see>.
            </summary>
            <remarks>
            <p class="body">
            TerminalSymbols are declared implicitly when a literal string is encountered
            for the first time within the grammar script; subsequent occurrences of that
            literal string are interpreted as a reference to the TerminalSymbol.
            </p>
            <p class="body">
            A TerminalSymbol can be explicitly declared by prefixing an identifier with the
            <see cref="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.TerminalSymbolDeclarationIdentifier">TerminalSymbolDeclarationIdentifier</see>,
            enclosed within a pair of special sequence symbols. When a reference to such a declaration
            is encountered, the FromReference property returns true.
            </p>
            </remarks> 
        </member>
        <member name="T:Infragistics.SyntaxParsing.Importing.CommentBlock">
            <summary>
            Represents a block of text that is enclosed between a
            <see cref="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.CommentBlockOpeningSymbol">CommentBlockOpeningSymbol</see>
            and a
            <see cref="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.CommentBlockClosingSymbol">CommentBlockClosingSymbol</see>
            </summary>
            <remarks>
            <p class="body">
            Text found within a comment block is ignored by the token processing layer.
            </p>
            </remarks> 
            <seealso cref="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.CommentBlockOpeningSymbol">CommentBlockOpeningSymbol</seealso>
            <seealso cref="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.CommentBlockClosingSymbol">CommentBlockClosingSymbol</seealso>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Importing.CommentBlock.GetLineNumber(System.Int32,System.Int32@)">
            <summary>
            Returns the one-based line number and column position of the specified character.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.CommentBlock.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Importing.SpecialSequence">
            <summary>
            Represents a block of text that is enclosed between a pair of
            <see cref="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.SpecialSequenceSymbol">SpecialSequenceSymbols</see>.
            </summary>
            <remarks>
            <p class="body">
            Text found within a special sequence block may or may not have significance to the
            GrammarImporter. Special sequence blocks which do have significance are handled
            accordingly by the importer; the ones that do not are added to the
            <see cref="P:Infragistics.SyntaxParsing.Importing.GrammarImporter.SpecialSequences">SpecialSequences</see>
            collection, but not used internally by the importer. Such tokens will return 'Unknown'
            as the value of the
            <see cref="P:Infragistics.SyntaxParsing.Importing.SpecialSequence.SpecialSequenceType">SpecialSequenceType</see>
            property.
            </p>
            </remarks> 
            <seealso cref="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.SpecialSequenceSymbol">SpecialSequenceSymbol</seealso>
            <seealso cref="P:Infragistics.SyntaxParsing.Importing.GrammarImporter.SpecialSequences">SpecialSequences collection (GrammarImporter class)</seealso>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Importing.SpecialSequence.Parse(Infragistics.SyntaxParsing.Importing.GrammarImporter,System.String)">
            <summary>
            Evaluates the specified <paramref name="text"/> and returns a
            <see cref="T:Infragistics.SyntaxParsing.Importing.SpecialSequenceType">SpecialSequenceType</see>
            constant.
            </summary>
            <param name="importer">
            A reference to the
            <see cref="T:Infragistics.SyntaxParsing.Importing.GrammarImporter">GrammarImporter</see>.
            </param>
            <param name="text">
            The string to parse.
            </param>
            <returns>
            A
            <see cref="T:Infragistics.SyntaxParsing.Importing.SpecialSequenceType">SpecialSequenceType</see>
            value.
            </returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Importing.SpecialSequence.ToString(Infragistics.SyntaxParsing.Importing.GrammarImporter,Infragistics.SyntaxParsing.Importing.SpecialSequenceType)">
            <summary>
            Returns the string representation of the specified
            <see cref="T:Infragistics.SyntaxParsing.Importing.SpecialSequenceType">SpecialSequenceType</see>
            constant.
            </summary>
            <param name="importer">
            A reference to the
            <see cref="T:Infragistics.SyntaxParsing.Importing.GrammarImporter">GrammarImporter</see>.
            </param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.SpecialSequence.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.SpecialSequence.SpecialSequenceType">
            <summary>
            Returns a constant which identifies the type of the associated special sequence.
            </summary>
            <seealso cref="T:Infragistics.SyntaxParsing.Importing.SpecialSequenceType">SpecialSequenceType enumeration</seealso>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Importing.NonTerminalSymbolDeclaration">
            <summary>
            Represents the declaration of a
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.NonTerminalSymbolDeclaration.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Importing.TerminalSymbolDeclaration">
            <summary>
            Represents the explicit declaration of a
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.TerminalSymbolDeclaration.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Importing.OperationGroup">
            <summary>
            Base class for grouping tokens.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.OperationGroup.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.OperationGroup.HasTokens">
            <summary>
            Returns a boolean value indicating whether this group has any elements in its Tokens collection.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.OperationGroup.Tokens">
            <summary>
            Returns a collection which contains the tokens which belong to this group.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Importing.OptionalGroup">
            <summary>
            Token group which acts as a placeholder for a
            <see cref="T:Infragistics.SyntaxParsing.OptionalRule">OptionalRule</see>.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.OptionalGroup.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Importing.RepetitionGroup">
            <summary>
            Token group which acts as a placeholder for a
            <see cref="T:Infragistics.SyntaxParsing.RepetitionRule">RepetitionRule</see>.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.RepetitionGroup.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.RepetitionGroup.Minimum">
            <summary>
            Returns the minimum number of repetitions.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.RepetitionGroup.Maximum">
            <summary>
            Returns the maximum number of repetitions, or null
            if the repetition rule is not to be contrained by an upper limit.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Importing.AlternationGroup">
            <summary>
            Token group which acts as a placeholder for an
            <see cref="T:Infragistics.SyntaxParsing.AlternationRule">AlternationRule</see>.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.AlternationGroup.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Importing.ConcatenationGroup">
            <summary>
            Token group which acts as a placeholder for an
            <see cref="T:Infragistics.SyntaxParsing.ConcatenationRule">ConcatenationRule</see>.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.ConcatenationGroup.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Importing.ConjunctionGroup">
            <summary>
            Token group which acts as a placeholder for a
            <see cref="T:Infragistics.SyntaxParsing.ConjunctionRule">ConjunctionRule</see>.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.ConjunctionGroup.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Importing.NegationGroup">
            <summary>
            Token group which acts as a placeholder for a
            <see cref="T:Infragistics.SyntaxParsing.NegationRule">NegationRule</see>.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.NegationGroup.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Importing.AssignmentToken">
            <summary>
            Represents the assignment operator (typically an equals sign ('=')).
            </summary>
            <seealso cref="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.AssignmentSymbol">AssignmentSymbol</seealso>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.AssignmentToken.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Importing.EndOfStatementToken">
            <summary>
            Represents the end of statement operator (typically a semicolon (';')).
            </summary>
            <seealso cref="P:Infragistics.SyntaxParsing.Importing.GrammarNotation.EndOfStatementSymbol">EndOfStatementSymbol</seealso>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.EndOfStatementToken.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.IdentifierToken.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Importing.LiteralStringToken">
            <summary>
            Represents a literal string.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.LiteralStringToken.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Importing.WhitespaceToken">
            <summary>
            Represents a continuous run of whitespace characters,
            i.e., space, tab, and carriage-return/line-feed.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.WhitespaceToken.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.WhitespaceToken.IsWhitespace">
            <summary>
            Returns true for this class.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Importing.BlockSymbol">
            <summary>
            Represents an opening or closing symbol for an operation group,
            optional group, or repetition group.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.BlockSymbol.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Importing.UnrecognizedContentToken">
            <summary>
            Represents content which was not recognized by the importer.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Importing.UnrecognizedContentToken.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.GrammarResourceCustomizer">
            <summary>
            Class used to provide the ability to customize resource strings.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Infragistics.SyntaxParsing.GrammarResourceCustomizer.#ctor">
            <summary>
            Creates a new instance of the GrammarResourceCustomizer class.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.GrammarResourceCustomizer.GetCustomizedString(System.String)">
            <summary>
            Gets the customized string identified by the specified string resource name.
            </summary>
            <param name="name">Name of the string resource that was customized.</param>
            <returns>The customized string or null if the resource wasn't customized.</returns>
            <seealso cref="M:Infragistics.SyntaxParsing.GrammarResourceCustomizer.ResetAllCustomizedStrings"/>
            <seealso cref="M:Infragistics.SyntaxParsing.GrammarResourceCustomizer.ResetCustomizedString(System.String)"/>
            <seealso cref="M:Infragistics.SyntaxParsing.GrammarResourceCustomizer.SetCustomizedString(System.String,System.String)"/>
        </member>
        <member name="M:Infragistics.SyntaxParsing.GrammarResourceCustomizer.ResetAllCustomizedStrings">
            <summary>
            Clears all strings customized by calls to <see cref="M:Infragistics.SyntaxParsing.GrammarResourceCustomizer.SetCustomizedString(System.String,System.String)"/> method.
            </summary>
            <seealso cref="M:Infragistics.SyntaxParsing.GrammarResourceCustomizer.SetCustomizedString(System.String,System.String)"/>
            <seealso cref="M:Infragistics.SyntaxParsing.GrammarResourceCustomizer.ResetCustomizedString(System.String)"/>
        </member>
        <member name="M:Infragistics.SyntaxParsing.GrammarResourceCustomizer.ResetCustomizedString(System.String)">
            <summary>
            Resets a customized string identified by the specified string resource name so that it will load from the resource file.
            </summary>
            <param name="name">Name of the string resource to customize.</param>
            <seealso cref="M:Infragistics.SyntaxParsing.GrammarResourceCustomizer.SetCustomizedString(System.String,System.String)"/>
        </member>
        <member name="M:Infragistics.SyntaxParsing.GrammarResourceCustomizer.SetCustomizedString(System.String,System.String)">
            <summary>
            Sets a customized string identified by the specified string resource name.
            </summary>
            <param name="name">Name of the string resource to customize.</param>
            <param name="customizedText">The customized string. If null this has the same effect as calling <see cref="M:Infragistics.SyntaxParsing.GrammarResourceCustomizer.ResetCustomizedString(System.String)"/></param>
            <seealso cref="M:Infragistics.SyntaxParsing.GrammarResourceCustomizer.ResetAllCustomizedStrings"/>
            <seealso cref="M:Infragistics.SyntaxParsing.GrammarResourceCustomizer.ResetCustomizedString(System.String)"/>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Resources">
            <summary>
            Exposes a <see cref="T:Infragistics.SyntaxParsing.GrammarResourceCustomizer"/> instance for this assembly. 
            </summary>
            <seealso cref="P:Infragistics.SyntaxParsing.Resources.Customizer"/> 
            <seealso cref="T:Infragistics.SyntaxParsing.GrammarResourceCustomizer"/> 
        </member>
        <member name="M:Infragistics.SyntaxParsing.Resources.GetString(System.String,System.Object[])">
            <summary>
            Returns the resource string using the specified name and default culture.
            </summary>
            <param name="name">Name of the string resource to return.</param>
            <param name="args">Arguments supplied to the string.Format method when formatting the string.</param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Resources.GetString(System.String)">
            <summary>
            Returns the resource string using the specified resource name and default culture. The string is then formatted using the arguments specified.
            </summary>
            <param name="name">Name of the string resource to return.</param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Resources.GetObject(System.String)">
            <summary>
            Returns the resource object using the specified name.
            </summary>
            <param name="name">Name of the resource item</param>
            <returns>An object containing the specified resource</returns>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Resources.Customizer">
            <summary>
            Returns the <see cref="T:Infragistics.SyntaxParsing.GrammarResourceCustomizer"/> for this assembly.
            </summary>
            <seealso cref="T:Infragistics.SyntaxParsing.GrammarResourceCustomizer"/> 
        </member>
        <member name="T:Infragistics.Shared.AssemblyVersion">
            <summary>
            Contains version information for the Infragistics assemblies.
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.MajorMinor">
            <summary>
            Major.Minor number portion of the assembly version
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.Build">
            <summary>
            Build number portion of the assembly version
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.Revision">
            <summary>
            Revision number portion of the assembly version
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.Version">
            <summary>
            Assembly version number
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.ToolBoxBitmapFolder">
            <summary>
            Location of the resources for toolbox bitmaps. 
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.CompanyName">
            <summary>
            Assembly company name
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.EndCopyrightYear">
            <summary>
            End year of assembly copyright
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.SatelliteContractVersion">
            <summary>
            The assembly version number for the satellite assemblies.
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.Configuration">
            <summary>
            The current build configuration for the assembly.
            </summary>
        </member>
    </members>
</doc>
